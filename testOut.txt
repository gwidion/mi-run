> DEBUG: allocated [a Symbol] + from 0x600022958 to 0x600022970 ( 24 B )
DEBUG: allocated nil from 0x600022970 to 0x600022980 ( 16 B )
DEBUG: allocated [a Const] ( + nil ) from 0x600022980 to 0x6000229a0 ( 32 B )
DEBUG: allocated [an Integer] 0 from 0x6000229a0 to 0x6000229b8 ( 24 B )
0
> DEBUG: allocated [a Symbol] + from 0x6000229b8 to 0x6000229d0 ( 24 B )
DEBUG: allocated [an Integer] 1 from 0x6000229d0 to 0x6000229e8 ( 24 B )
DEBUG: allocated [an Integer] 1 from 0x6000229e8 to 0x600022a00 ( 24 B )
DEBUG: allocated nil from 0x600022a00 to 0x600022a10 ( 16 B )
DEBUG: allocated [a Const] ( 1 nil ) from 0x600022a10 to 0x600022a30 ( 32 B )
DEBUG: allocated [a Const] ( 1 ( 1 nil ) ) from 0x600022a30 to 0x600022a50 ( 32 B )
DEBUG: allocated [a Const] ( + ( 1 ( 1 nil ) ) ) from 0x600022a50 to 0x600022a70 ( 32 B )
DEBUG: allocated [an Integer] 2 from 0x600022a70 to 0x600022a88 ( 24 B )
2
> DEBUG: allocated [a Symbol] + from 0x600022a88 to 0x600022aa0 ( 24 B )
DEBUG: allocated [an Integer] 5 from 0x600022aa0 to 0x600022ab8 ( 24 B )
DEBUG: allocated [an Integer] 5 from 0x600022ab8 to 0x600022ad0 ( 24 B )
DEBUG: allocated [an Integer] 5 from 0x600022ad0 to 0x600022ae8 ( 24 B )
DEBUG: allocated [an Integer] 5 from 0x600022ae8 to 0x600022b00 ( 24 B )
DEBUG: allocated [an Integer] 5 from 0x600022b00 to 0x600022b18 ( 24 B )
DEBUG: allocated nil from 0x600022b18 to 0x600022b28 ( 16 B )
DEBUG: allocated [a Const] ( 5 nil ) from 0x600022b28 to 0x600022b48 ( 32 B )
DEBUG: allocated [a Const] ( 5 ( 5 nil ) ) from 0x600022b48 to 0x600022b68 ( 32 B )
DEBUG: allocated [a Const] ( 5 ( 5 ( 5 nil ) ) ) from 0x600022b68 to 0x600022b88 ( 32 B )
DEBUG: allocated [a Const] ( 5 ( 5 ( 5 ( 5 nil ) ) ) ) from 0x600022b88 to 0x600022ba8 ( 32 B )
DEBUG: allocated [a Const] ( 5 ( 5 ( 5 ( 5 ( 5 nil ) ) ) ) ) from 0x600022ba8 to 0x600022bc8 ( 32 B )
DEBUG: allocated [a Const] ( + ( 5 ( 5 ( 5 ( 5 ( 5 nil ) ) ) ) ) ) from 0x600022bc8 to 0x600022be8 ( 32 B )
DEBUG: allocated [an Integer] 25 from 0x600022be8 to 0x600022c00 ( 24 B )
25
> DEBUG: allocated [a Symbol] - from 0x600022c00 to 0x600022c18 ( 24 B )
DEBUG: allocated nil from 0x600022c18 to 0x600022c28 ( 16 B )
DEBUG: allocated [a Const] ( - nil ) from 0x600022c28 to 0x600022c48 ( 32 B )
no args for minus operator
> DEBUG: allocated [a Symbol] - from 0x600022c48 to 0x600022c60 ( 24 B )
DEBUG: allocated [an Integer] 5 from 0x600022c60 to 0x600022c78 ( 24 B )
DEBUG: allocated nil from 0x600022c78 to 0x600022c88 ( 16 B )
DEBUG: allocated [a Const] ( 5 nil ) from 0x600022c88 to 0x600022ca8 ( 32 B )
DEBUG: allocated [a Const] ( - ( 5 nil ) ) from 0x600022ca8 to 0x600022cc8 ( 32 B )
DEBUG: allocated [an Integer] -5 from 0x600022cc8 to 0x600022ce0 ( 24 B )
-5
> DEBUG: allocated [a Symbol] - from 0x600022ce0 to 0x600022cf8 ( 24 B )
DEBUG: allocated [an Integer] 30 from 0x600022cf8 to 0x600022d10 ( 24 B )
DEBUG: allocated [an Integer] 10 from 0x600022d10 to 0x600022d28 ( 24 B )
DEBUG: allocated [an Integer] 10 from 0x600022d28 to 0x600022d40 ( 24 B )
DEBUG: allocated [an Integer] 10 from 0x600022d40 to 0x600022d58 ( 24 B )
DEBUG: allocated nil from 0x600022d58 to 0x600022d68 ( 16 B )
DEBUG: allocated [a Const] ( 10 nil ) from 0x600022d68 to 0x600022d88 ( 32 B )
DEBUG: allocated [a Const] ( 10 ( 10 nil ) ) from 0x600022d88 to 0x600022da8 ( 32 B )
DEBUG: allocated [a Const] ( 10 ( 10 ( 10 nil ) ) ) from 0x600022da8 to 0x600022dc8 ( 32 B )
DEBUG: allocated [a Const] ( 30 ( 10 ( 10 ( 10 nil ) ) ) ) from 0x600022dc8 to 0x600022de8 ( 32 B )
DEBUG: allocated [a Const] ( - ( 30 ( 10 ( 10 ( 10 nil ) ) ) ) ) from 0x600022de8 to 0x600022e08 ( 32 B )
DEBUG: allocated [an Integer] 0 from 0x600022e08 to 0x600022e20 ( 24 B )
0
> DEBUG: allocated [a Symbol] * from 0x600022e20 to 0x600022e38 ( 24 B )
DEBUG: allocated nil from 0x600022e38 to 0x600022e48 ( 16 B )
DEBUG: allocated [a Const] ( * nil ) from 0x600022e48 to 0x600022e68 ( 32 B )
DEBUG: allocated [an Integer] 1 from 0x600022e68 to 0x600022e80 ( 24 B )
1
> DEBUG: allocated [a Symbol] * from 0x600022e80 to 0x600022e98 ( 24 B )
DEBUG: allocated [an Integer] 6 from 0x600022e98 to 0x600022eb0 ( 24 B )
DEBUG: allocated nil from 0x600022eb0 to 0x600022ec0 ( 16 B )
DEBUG: allocated [a Const] ( 6 nil ) from 0x600022ec0 to 0x600022ee0 ( 32 B )
DEBUG: allocated [a Const] ( * ( 6 nil ) ) from 0x600022ee0 to 0x600022f00 ( 32 B )
DEBUG: allocated [an Integer] 6 from 0x600022f00 to 0x600022f18 ( 24 B )
6
> DEBUG: allocated [a Symbol] * from 0x600022f18 to 0x600022f30 ( 24 B )
DEBUG: allocated [an Integer] 2 from 0x600022f30 to 0x600022f48 ( 24 B )
DEBUG: allocated [an Integer] 2 from 0x600022f48 to 0x600022f60 ( 24 B )
DEBUG: allocated [an Integer] 2 from 0x600022f60 to 0x600022f78 ( 24 B )
DEBUG: allocated [an Integer] 2 from 0x600022f78 to 0x600022f90 ( 24 B )
DEBUG: allocated nil from 0x600022f90 to 0x600022fa0 ( 16 B )
DEBUG: allocated [a Const] ( 2 nil ) from 0x600022fa0 to 0x600022fc0 ( 32 B )
DEBUG: allocated [a Const] ( 2 ( 2 nil ) ) from 0x600022fc0 to 0x600022fe0 ( 32 B )
DEBUG: allocated [a Const] ( 2 ( 2 ( 2 nil ) ) ) from 0x600022fe0 to 0x600023000 ( 32 B )
DEBUG: allocated [a Const] ( 2 ( 2 ( 2 ( 2 nil ) ) ) ) from 0x600023000 to 0x600023020 ( 32 B )
DEBUG: allocated [a Const] ( * ( 2 ( 2 ( 2 ( 2 nil ) ) ) ) ) from 0x600023020 to 0x600023040 ( 32 B )
DEBUG: allocated [an Integer] 16 from 0x600023040 to 0x600023058 ( 24 B )
16
> DEBUG: allocated [a Symbol] = from 0x600023058 to 0x600023070 ( 24 B )
DEBUG: allocated [an Integer] 1 from 0x600023070 to 0x600023088 ( 24 B )
DEBUG: allocated nil from 0x600023088 to 0x600023098 ( 16 B )
DEBUG: allocated [a Const] ( 1 nil ) from 0x600023098 to 0x6000230b8 ( 32 B )
DEBUG: allocated [a Const] ( = ( 1 nil ) ) from 0x6000230b8 to 0x6000230d8 ( 32 B )
= expects exactly 2 arguments
> DEBUG: allocated [a Symbol] = from 0x6000230d8 to 0x6000230f0 ( 24 B )
DEBUG: allocated [an Integer] 10 from 0x6000230f0 to 0x600023108 ( 24 B )
DEBUG: allocated [an Integer] 10 from 0x600023108 to 0x600023120 ( 24 B )
DEBUG: allocated nil from 0x600023120 to 0x600023130 ( 16 B )
DEBUG: allocated [a Const] ( 10 nil ) from 0x600023130 to 0x600023150 ( 32 B )
DEBUG: allocated [a Const] ( 10 ( 10 nil ) ) from 0x600023150 to 0x600023170 ( 32 B )
DEBUG: allocated [a Const] ( = ( 10 ( 10 nil ) ) ) from 0x600023170 to 0x600023190 ( 32 B )
DEBUG: allocated [a Boolean] #t from 0x600023190 to 0x6000231a0 ( 16 B )
#t
> DEBUG: allocated [a Symbol] = from 0x6000231a0 to 0x6000231b8 ( 24 B )
DEBUG: allocated [an Integer] 5 from 0x6000231b8 to 0x6000231d0 ( 24 B )
DEBUG: allocated [an Integer] 2 from 0x6000231d0 to 0x6000231e8 ( 24 B )
DEBUG: allocated nil from 0x6000231e8 to 0x6000231f8 ( 16 B )
DEBUG: allocated [a Const] ( 2 nil ) from 0x6000231f8 to 0x600023218 ( 32 B )
DEBUG: allocated [a Const] ( 5 ( 2 nil ) ) from 0x600023218 to 0x600023238 ( 32 B )
DEBUG: allocated [a Const] ( = ( 5 ( 2 nil ) ) ) from 0x600023238 to 0x600023258 ( 32 B )
DEBUG: allocated [a Boolean] #f from 0x600023258 to 0x600023268 ( 16 B )
#f
> DEBUG: allocated [a Symbol] = from 0x600023268 to 0x600023280 ( 24 B )
DEBUG: allocated [an Integer] 2 from 0x600023280 to 0x600023298 ( 24 B )
DEBUG: allocated [an Integer] 3 from 0x600023298 to 0x6000232b0 ( 24 B )
DEBUG: allocated [an Integer] 5 from 0x6000232b0 to 0x6000232c8 ( 24 B )
DEBUG: allocated nil from 0x6000232c8 to 0x6000232d8 ( 16 B )
DEBUG: allocated [a Const] ( 5 nil ) from 0x6000232d8 to 0x6000232f8 ( 32 B )
DEBUG: allocated [a Const] ( 3 ( 5 nil ) ) from 0x6000232f8 to 0x600023318 ( 32 B )
DEBUG: allocated [a Const] ( 2 ( 3 ( 5 nil ) ) ) from 0x600023318 to 0x600023338 ( 32 B )
DEBUG: allocated [a Const] ( = ( 2 ( 3 ( 5 nil ) ) ) ) from 0x600023338 to 0x600023358 ( 32 B )
= expects exactly 2 arguments
> DEBUG: allocated [a Symbol] < from 0x600023358 to 0x600023370 ( 24 B )
DEBUG: allocated [an Integer] 4 from 0x600023370 to 0x600023388 ( 24 B )
DEBUG: allocated nil from 0x600023388 to 0x600023398 ( 16 B )
DEBUG: allocated [a Const] ( 4 nil ) from 0x600023398 to 0x6000233b8 ( 32 B )
DEBUG: allocated [a Const] ( < ( 4 nil ) ) from 0x6000233b8 to 0x6000233d8 ( 32 B )
< expects exactly 2 arguments
> DEBUG: allocated [a Symbol] < from 0x6000233d8 to 0x6000233f0 ( 24 B )
DEBUG: allocated [an Integer] 2 from 0x6000233f0 to 0x600023408 ( 24 B )
DEBUG: allocated [an Integer] 3 from 0x600023408 to 0x600023420 ( 24 B )
DEBUG: allocated nil from 0x600023420 to 0x600023430 ( 16 B )
DEBUG: allocated [a Const] ( 3 nil ) from 0x600023430 to 0x600023450 ( 32 B )
DEBUG: allocated [a Const] ( 2 ( 3 nil ) ) from 0x600023450 to 0x600023470 ( 32 B )
DEBUG: allocated [a Const] ( < ( 2 ( 3 nil ) ) ) from 0x600023470 to 0x600023490 ( 32 B )
DEBUG: allocated [a Boolean] #t from 0x600023490 to 0x6000234a0 ( 16 B )
#t
> DEBUG: allocated [a Symbol] < from 0x6000234a0 to 0x6000234b8 ( 24 B )
DEBUG: allocated [an Integer] 2 from 0x6000234b8 to 0x6000234d0 ( 24 B )
DEBUG: allocated [an Integer] 3 from 0x6000234d0 to 0x6000234e8 ( 24 B )
DEBUG: allocated [an Integer] 5 from 0x6000234e8 to 0x600023500 ( 24 B )
DEBUG: allocated nil from 0x600023500 to 0x600023510 ( 16 B )
DEBUG: allocated [a Const] ( 5 nil ) from 0x600023510 to 0x600023530 ( 32 B )
DEBUG: allocated [a Const] ( 3 ( 5 nil ) ) from 0x600023530 to 0x600023550 ( 32 B )
DEBUG: allocated [a Const] ( 2 ( 3 ( 5 nil ) ) ) from 0x600023550 to 0x600023570 ( 32 B )
DEBUG: allocated [a Const] ( < ( 2 ( 3 ( 5 nil ) ) ) ) from 0x600023570 to 0x600023590 ( 32 B )
< expects exactly 2 arguments
> DEBUG: allocated [a Symbol] > from 0x600023590 to 0x6000235a8 ( 24 B )
DEBUG: allocated [an Integer] 4 from 0x6000235a8 to 0x6000235c0 ( 24 B )
DEBUG: allocated nil from 0x6000235c0 to 0x6000235d0 ( 16 B )
DEBUG: allocated [a Const] ( 4 nil ) from 0x6000235d0 to 0x6000235f0 ( 32 B )
DEBUG: allocated [a Const] ( > ( 4 nil ) ) from 0x6000235f0 to 0x600023610 ( 32 B )
> expects exactly 2 argumentsDEBUG: allocated [an Object]  from 0x600023610 to 0x600023620 ( 16 B )

> DEBUG: allocated [a Symbol] > from 0x600023620 to 0x600023638 ( 24 B )
DEBUG: allocated [an Integer] 2 from 0x600023638 to 0x600023650 ( 24 B )
DEBUG: allocated [an Integer] 3 from 0x600023650 to 0x600023668 ( 24 B )
DEBUG: allocated nil from 0x600023668 to 0x600023678 ( 16 B )
DEBUG: allocated [a Const] ( 3 nil ) from 0x600023678 to 0x600023698 ( 32 B )
DEBUG: allocated [a Const] ( 2 ( 3 nil ) ) from 0x600023698 to 0x6000236b8 ( 32 B )
DEBUG: allocated [a Const] ( > ( 2 ( 3 nil ) ) ) from 0x6000236b8 to 0x6000236d8 ( 32 B )
DEBUG: allocated [a Boolean] #f from 0x6000236d8 to 0x6000236e8 ( 16 B )
#f
> DEBUG: allocated [a Symbol] > from 0x6000236e8 to 0x600023700 ( 24 B )
DEBUG: allocated [an Integer] 2 from 0x600023700 to 0x600023718 ( 24 B )
DEBUG: allocated [an Integer] 3 from 0x600023718 to 0x600023730 ( 24 B )
DEBUG: allocated [an Integer] 5 from 0x600023730 to 0x600023748 ( 24 B )
DEBUG: allocated nil from 0x600023748 to 0x600023758 ( 16 B )
DEBUG: allocated [a Const] ( 5 nil ) from 0x600023758 to 0x600023778 ( 32 B )
DEBUG: allocated [a Const] ( 3 ( 5 nil ) ) from 0x600023778 to 0x600023798 ( 32 B )
DEBUG: allocated [a Const] ( 2 ( 3 ( 5 nil ) ) ) from 0x600023798 to 0x6000237b8 ( 32 B )
DEBUG: allocated [a Const] ( > ( 2 ( 3 ( 5 nil ) ) ) ) from 0x6000237b8 to 0x6000237d8 ( 32 B )
> expects exactly 2 argumentsDEBUG: allocated [an Object]  from 0x6000237d8 to 0x6000237e8 ( 16 B )

> DEBUG: allocated [a Symbol] if from 0x6000237e8 to 0x600023800 ( 24 B )
DEBUG: allocated [a Symbol] < from 0x600023800 to 0x600023818 ( 24 B )
DEBUG: allocated [an Integer] 2 from 0x600023818 to 0x600023830 ( 24 B )
DEBUG: allocated [an Integer] 3 from 0x600023830 to 0x600023848 ( 24 B )
DEBUG: collecting garbage to free 16 B
DEBUG:   freed [a Symbol] + from 0x600022958 to 0x600022970 ( 24 B )
DEBUG:   freed nil from 0x600022970 to 0x600022980 ( 16 B )
DEBUG:   freed [a Const] ( + nil ) from 0x600022980 to 0x6000229a0 ( 32 B )
DEBUG:   freed [an Integer] 0 from 0x6000229a0 to 0x6000229b8 ( 24 B )
DEBUG:   freed [a Symbol] + from 0x6000229b8 to 0x6000229d0 ( 24 B )
DEBUG:   freed [an Integer] 1 from 0x6000229d0 to 0x6000229e8 ( 24 B )
DEBUG:   freed [an Integer] 1 from 0x6000229e8 to 0x600022a00 ( 24 B )
DEBUG:   freed nil from 0x600022a00 to 0x600022a10 ( 16 B )
DEBUG:   freed [a Const] ( 1 nil ) from 0x600022a10 to 0x600022a30 ( 32 B )
DEBUG:   freed [a Const] ( 1 ( 1 nil ) ) from 0x600022a30 to 0x600022a50 ( 32 B )
DEBUG:   freed [a Const] ( + ( 1 ( 1 nil ) ) ) from 0x600022a50 to 0x600022a70 ( 32 B )
DEBUG:   freed [an Integer] 2 from 0x600022a70 to 0x600022a88 ( 24 B )
DEBUG:   freed [a Symbol] + from 0x600022a88 to 0x600022aa0 ( 24 B )
DEBUG:   freed [an Integer] 5 from 0x600022aa0 to 0x600022ab8 ( 24 B )
DEBUG:   freed [an Integer] 5 from 0x600022ab8 to 0x600022ad0 ( 24 B )
DEBUG:   freed [an Integer] 5 from 0x600022ad0 to 0x600022ae8 ( 24 B )
DEBUG:   freed [an Integer] 5 from 0x600022ae8 to 0x600022b00 ( 24 B )
DEBUG:   freed [an Integer] 5 from 0x600022b00 to 0x600022b18 ( 24 B )
DEBUG:   freed nil from 0x600022b18 to 0x600022b28 ( 16 B )
DEBUG:   freed [a Const] ( 5 nil ) from 0x600022b28 to 0x600022b48 ( 32 B )
DEBUG:   freed [a Const] ( 5 ( 5 nil ) ) from 0x600022b48 to 0x600022b68 ( 32 B )
DEBUG:   freed [a Const] ( 5 ( 5 ( 5 nil ) ) ) from 0x600022b68 to 0x600022b88 ( 32 B )
DEBUG:   freed [a Const] ( 5 ( 5 ( 5 ( 5 nil ) ) ) ) from 0x600022b88 to 0x600022ba8 ( 32 B )
DEBUG:   freed [a Const] ( 5 ( 5 ( 5 ( 5 ( 5 nil ) ) ) ) ) from 0x600022ba8 to 0x600022bc8 ( 32 B )
DEBUG:   freed [a Const] ( + ( 5 ( 5 ( 5 ( 5 ( 5 nil ) ) ) ) ) ) from 0x600022bc8 to 0x600022be8 ( 32 B )
DEBUG:   freed [an Integer] 25 from 0x600022be8 to 0x600022c00 ( 24 B )
DEBUG:   freed [a Symbol] - from 0x600022c00 to 0x600022c18 ( 24 B )
DEBUG:   freed nil from 0x600022c18 to 0x600022c28 ( 16 B )
DEBUG:   freed [a Const] ( - nil ) from 0x600022c28 to 0x600022c48 ( 32 B )
DEBUG:   freed [a Symbol] - from 0x600022c48 to 0x600022c60 ( 24 B )
DEBUG:   freed [an Integer] 5 from 0x600022c60 to 0x600022c78 ( 24 B )
DEBUG:   freed nil from 0x600022c78 to 0x600022c88 ( 16 B )
DEBUG:   freed [a Const] ( 5 nil ) from 0x600022c88 to 0x600022ca8 ( 32 B )
DEBUG:   freed [a Const] ( - ( 5 nil ) ) from 0x600022ca8 to 0x600022cc8 ( 32 B )
DEBUG:   freed [an Integer] -5 from 0x600022cc8 to 0x600022ce0 ( 24 B )
DEBUG:   freed [a Symbol] - from 0x600022ce0 to 0x600022cf8 ( 24 B )
DEBUG:   freed [an Integer] 30 from 0x600022cf8 to 0x600022d10 ( 24 B )
DEBUG:   freed [an Integer] 10 from 0x600022d10 to 0x600022d28 ( 24 B )
DEBUG:   freed [an Integer] 10 from 0x600022d28 to 0x600022d40 ( 24 B )
DEBUG:   freed [an Integer] 10 from 0x600022d40 to 0x600022d58 ( 24 B )
DEBUG:   freed nil from 0x600022d58 to 0x600022d68 ( 16 B )
DEBUG:   freed [a Const] ( 10 nil ) from 0x600022d68 to 0x600022d88 ( 32 B )
DEBUG:   freed [a Const] ( 10 ( 10 nil ) ) from 0x600022d88 to 0x600022da8 ( 32 B )
DEBUG:   freed [a Const] ( 10 ( 10 ( 10 nil ) ) ) from 0x600022da8 to 0x600022dc8 ( 32 B )
DEBUG:   freed [a Const] ( 30 ( 10 ( 10 ( 10 nil ) ) ) ) from 0x600022dc8 to 0x600022de8 ( 32 B )
DEBUG:   freed [a Const] ( - ( 30 ( 10 ( 10 ( 10 nil ) ) ) ) ) from 0x600022de8 to 0x600022e08 ( 32 B )
DEBUG:   freed [an Integer] 0 from 0x600022e08 to 0x600022e20 ( 24 B )
DEBUG:   freed [a Symbol] * from 0x600022e20 to 0x600022e38 ( 24 B )
DEBUG:   freed nil from 0x600022e38 to 0x600022e48 ( 16 B )
DEBUG:   freed [a Const] ( * nil ) from 0x600022e48 to 0x600022e68 ( 32 B )
DEBUG:   freed [an Integer] 1 from 0x600022e68 to 0x600022e80 ( 24 B )
DEBUG:   freed [a Symbol] * from 0x600022e80 to 0x600022e98 ( 24 B )
DEBUG:   freed [an Integer] 6 from 0x600022e98 to 0x600022eb0 ( 24 B )
DEBUG:   freed nil from 0x600022eb0 to 0x600022ec0 ( 16 B )
DEBUG:   freed [a Const] ( 6 nil ) from 0x600022ec0 to 0x600022ee0 ( 32 B )
DEBUG:   freed [a Const] ( * ( 6 nil ) ) from 0x600022ee0 to 0x600022f00 ( 32 B )
DEBUG:   freed [an Integer] 6 from 0x600022f00 to 0x600022f18 ( 24 B )
DEBUG:   freed [a Symbol] * from 0x600022f18 to 0x600022f30 ( 24 B )
DEBUG:   freed [an Integer] 2 from 0x600022f30 to 0x600022f48 ( 24 B )
DEBUG:   freed [an Integer] 2 from 0x600022f48 to 0x600022f60 ( 24 B )
DEBUG:   freed [an Integer] 2 from 0x600022f60 to 0x600022f78 ( 24 B )
DEBUG:   freed [an Integer] 2 from 0x600022f78 to 0x600022f90 ( 24 B )
DEBUG:   freed nil from 0x600022f90 to 0x600022fa0 ( 16 B )
DEBUG:   freed [a Const] ( 2 nil ) from 0x600022fa0 to 0x600022fc0 ( 32 B )
DEBUG:   freed [a Const] ( 2 ( 2 nil ) ) from 0x600022fc0 to 0x600022fe0 ( 32 B )
DEBUG:   freed [a Const] ( 2 ( 2 ( 2 nil ) ) ) from 0x600022fe0 to 0x600023000 ( 32 B )
DEBUG:   freed [a Const] ( 2 ( 2 ( 2 ( 2 nil ) ) ) ) from 0x600023000 to 0x600023020 ( 32 B )
DEBUG:   freed [a Const] ( * ( 2 ( 2 ( 2 ( 2 nil ) ) ) ) ) from 0x600023020 to 0x600023040 ( 32 B )
DEBUG:   freed [an Integer] 16 from 0x600023040 to 0x600023058 ( 24 B )
DEBUG:   freed [a Symbol] = from 0x600023058 to 0x600023070 ( 24 B )
DEBUG:   freed [an Integer] 1 from 0x600023070 to 0x600023088 ( 24 B )
DEBUG:   freed nil from 0x600023088 to 0x600023098 ( 16 B )
DEBUG:   freed [a Const] ( 1 nil ) from 0x600023098 to 0x6000230b8 ( 32 B )
DEBUG:   freed [a Const] ( = ( 1 nil ) ) from 0x6000230b8 to 0x6000230d8 ( 32 B )
DEBUG:   freed [a Symbol] = from 0x6000230d8 to 0x6000230f0 ( 24 B )
DEBUG:   freed [an Integer] 10 from 0x6000230f0 to 0x600023108 ( 24 B )
DEBUG:   freed [an Integer] 10 from 0x600023108 to 0x600023120 ( 24 B )
DEBUG:   freed nil from 0x600023120 to 0x600023130 ( 16 B )
DEBUG:   freed [a Const] ( 10 nil ) from 0x600023130 to 0x600023150 ( 32 B )
DEBUG:   freed [a Const] ( 10 ( 10 nil ) ) from 0x600023150 to 0x600023170 ( 32 B )
DEBUG:   freed [a Const] ( = ( 10 ( 10 nil ) ) ) from 0x600023170 to 0x600023190 ( 32 B )
DEBUG:   freed [a Boolean] #t from 0x600023190 to 0x6000231a0 ( 16 B )
DEBUG:   freed [a Symbol] = from 0x6000231a0 to 0x6000231b8 ( 24 B )
DEBUG:   freed [an Integer] 5 from 0x6000231b8 to 0x6000231d0 ( 24 B )
DEBUG:   freed [an Integer] 2 from 0x6000231d0 to 0x6000231e8 ( 24 B )
DEBUG:   freed nil from 0x6000231e8 to 0x6000231f8 ( 16 B )
DEBUG:   freed [a Const] ( 2 nil ) from 0x6000231f8 to 0x600023218 ( 32 B )
DEBUG:   freed [a Const] ( 5 ( 2 nil ) ) from 0x600023218 to 0x600023238 ( 32 B )
DEBUG:   freed [a Const] ( = ( 5 ( 2 nil ) ) ) from 0x600023238 to 0x600023258 ( 32 B )
DEBUG:   freed [a Boolean] #f from 0x600023258 to 0x600023268 ( 16 B )
DEBUG:   freed [a Symbol] = from 0x600023268 to 0x600023280 ( 24 B )
DEBUG:   freed [an Integer] 2 from 0x600023280 to 0x600023298 ( 24 B )
DEBUG:   freed [an Integer] 3 from 0x600023298 to 0x6000232b0 ( 24 B )
DEBUG:   freed [an Integer] 5 from 0x6000232b0 to 0x6000232c8 ( 24 B )
DEBUG:   freed nil from 0x6000232c8 to 0x6000232d8 ( 16 B )
DEBUG:   freed [a Const] ( 5 nil ) from 0x6000232d8 to 0x6000232f8 ( 32 B )
DEBUG:   freed [a Const] ( 3 ( 5 nil ) ) from 0x6000232f8 to 0x600023318 ( 32 B )
DEBUG:   freed [a Const] ( 2 ( 3 ( 5 nil ) ) ) from 0x600023318 to 0x600023338 ( 32 B )
DEBUG:   freed [a Const] ( = ( 2 ( 3 ( 5 nil ) ) ) ) from 0x600023338 to 0x600023358 ( 32 B )
DEBUG:   freed [a Symbol] < from 0x600023358 to 0x600023370 ( 24 B )
DEBUG:   freed [an Integer] 4 from 0x600023370 to 0x600023388 ( 24 B )
DEBUG:   freed nil from 0x600023388 to 0x600023398 ( 16 B )
DEBUG:   freed [a Const] ( 4 nil ) from 0x600023398 to 0x6000233b8 ( 32 B )
DEBUG:   freed [a Const] ( < ( 4 nil ) ) from 0x6000233b8 to 0x6000233d8 ( 32 B )
DEBUG:   freed [a Symbol] < from 0x6000233d8 to 0x6000233f0 ( 24 B )
DEBUG:   freed [an Integer] 2 from 0x6000233f0 to 0x600023408 ( 24 B )
DEBUG:   freed [an Integer] 3 from 0x600023408 to 0x600023420 ( 24 B )
DEBUG:   freed nil from 0x600023420 to 0x600023430 ( 16 B )
DEBUG:   freed [a Const] ( 3 nil ) from 0x600023430 to 0x600023450 ( 32 B )
DEBUG:   freed [a Const] ( 2 ( 3 nil ) ) from 0x600023450 to 0x600023470 ( 32 B )
DEBUG:   freed [a Const] ( < ( 2 ( 3 nil ) ) ) from 0x600023470 to 0x600023490 ( 32 B )
DEBUG:   freed [a Boolean] #t from 0x600023490 to 0x6000234a0 ( 16 B )
DEBUG:   freed [a Symbol] < from 0x6000234a0 to 0x6000234b8 ( 24 B )
DEBUG:   freed [an Integer] 2 from 0x6000234b8 to 0x6000234d0 ( 24 B )
DEBUG:   freed [an Integer] 3 from 0x6000234d0 to 0x6000234e8 ( 24 B )
DEBUG:   freed [an Integer] 5 from 0x6000234e8 to 0x600023500 ( 24 B )
DEBUG:   freed nil from 0x600023500 to 0x600023510 ( 16 B )
DEBUG:   freed [a Const] ( 5 nil ) from 0x600023510 to 0x600023530 ( 32 B )
DEBUG:   freed [a Const] ( 3 ( 5 nil ) ) from 0x600023530 to 0x600023550 ( 32 B )
DEBUG:   freed [a Const] ( 2 ( 3 ( 5 nil ) ) ) from 0x600023550 to 0x600023570 ( 32 B )
DEBUG:   freed [a Const] ( < ( 2 ( 3 ( 5 nil ) ) ) ) from 0x600023570 to 0x600023590 ( 32 B )
DEBUG:   freed [a Symbol] > from 0x600023590 to 0x6000235a8 ( 24 B )
DEBUG:   freed [an Integer] 4 from 0x6000235a8 to 0x6000235c0 ( 24 B )
DEBUG:   freed nil from 0x6000235c0 to 0x6000235d0 ( 16 B )
DEBUG:   freed [a Const] ( 4 nil ) from 0x6000235d0 to 0x6000235f0 ( 32 B )
DEBUG:   freed [a Const] ( > ( 4 nil ) ) from 0x6000235f0 to 0x600023610 ( 32 B )
DEBUG:   freed [an Object]  from 0x600023610 to 0x600023620 ( 16 B )
DEBUG:   freed [a Symbol] > from 0x600023620 to 0x600023638 ( 24 B )
DEBUG:   freed [an Integer] 2 from 0x600023638 to 0x600023650 ( 24 B )
DEBUG:   freed [an Integer] 3 from 0x600023650 to 0x600023668 ( 24 B )
DEBUG:   freed nil from 0x600023668 to 0x600023678 ( 16 B )
DEBUG:   freed [a Const] ( 3 nil ) from 0x600023678 to 0x600023698 ( 32 B )
DEBUG:   freed [a Const] ( 2 ( 3 nil ) ) from 0x600023698 to 0x6000236b8 ( 32 B )
DEBUG:   freed [a Const] ( > ( 2 ( 3 nil ) ) ) from 0x6000236b8 to 0x6000236d8 ( 32 B )
DEBUG:   freed [a Boolean] #f from 0x6000236d8 to 0x6000236e8 ( 16 B )
DEBUG:   freed [a Symbol] > from 0x6000236e8 to 0x600023700 ( 24 B )
DEBUG:   freed [an Integer] 2 from 0x600023700 to 0x600023718 ( 24 B )
DEBUG:   freed [an Integer] 3 from 0x600023718 to 0x600023730 ( 24 B )
DEBUG:   freed [an Integer] 5 from 0x600023730 to 0x600023748 ( 24 B )
DEBUG:   freed nil from 0x600023748 to 0x600023758 ( 16 B )
DEBUG:   freed [a Const] ( 5 nil ) from 0x600023758 to 0x600023778 ( 32 B )
DEBUG:   freed [a Const] ( 3 ( 5 nil ) ) from 0x600023778 to 0x600023798 ( 32 B )
DEBUG:   freed [a Const] ( 2 ( 3 ( 5 nil ) ) ) from 0x600023798 to 0x6000237b8 ( 32 B )
DEBUG:   freed [a Const] ( > ( 2 ( 3 ( 5 nil ) ) ) ) from 0x6000237b8 to 0x6000237d8 ( 32 B )
DEBUG:   freed [an Object]  from 0x6000237d8 to 0x6000237e8 ( 16 B )
DEBUG:   empty space from 0x600023848 to 0x600023850 ( 8 B )
DEBUG: garbage collected - mode set to pick free spaces - freed enough memory
DEBUG: allocated nil from 0x600022958 to 0x600022968 ( 16 B )
DEBUG: allocated [a Const] ( 3 nil ) from 0x600022968 to 0x600022988 ( 32 B )
DEBUG: allocated [a Const] ( 2 ( 3 nil ) ) from 0x600022988 to 0x6000229a8 ( 32 B )
DEBUG: allocated [a Const] ( < ( 2 ( 3 nil ) ) ) from 0x6000229a8 to 0x6000229c8 ( 32 B )
DEBUG: allocated [a Symbol] + from 0x6000229c8 to 0x6000229e0 ( 24 B )
DEBUG: allocated [an Integer] 1 from 0x6000229e0 to 0x6000229f8 ( 24 B )
DEBUG: allocated [an Integer] 0 from 0x6000229f8 to 0x600022a10 ( 24 B )
DEBUG: allocated nil from 0x600022a10 to 0x600022a20 ( 16 B )
DEBUG: allocated [a Const] ( 0 nil ) from 0x600022a20 to 0x600022a40 ( 32 B )
DEBUG: allocated [a Const] ( 1 ( 0 nil ) ) from 0x600022a40 to 0x600022a60 ( 32 B )
DEBUG: allocated [a Const] ( + ( 1 ( 0 nil ) ) ) from 0x600022a60 to 0x600022a80 ( 32 B )
DEBUG: allocated [a Symbol] + from 0x600022a80 to 0x600022a98 ( 24 B )
DEBUG: allocated [an Integer] 0 from 0x600022a98 to 0x600022ab0 ( 24 B )
DEBUG: allocated [an Integer] 0 from 0x600022ab0 to 0x600022ac8 ( 24 B )
DEBUG: allocated nil from 0x600022ac8 to 0x600022ad8 ( 16 B )
DEBUG: allocated [a Const] ( 0 nil ) from 0x600022ad8 to 0x600022af8 ( 32 B )
DEBUG: allocated [a Const] ( 0 ( 0 nil ) ) from 0x600022af8 to 0x600022b18 ( 32 B )
DEBUG: allocated [a Const] ( + ( 0 ( 0 nil ) ) ) from 0x600022b18 to 0x600022b38 ( 32 B )
DEBUG: allocated nil from 0x600022b38 to 0x600022b48 ( 16 B )
DEBUG: allocated [a Const] ( ( + ( 0 ( 0 nil ) ) ) nil ) from 0x600022b48 to 0x600022b68 ( 32 B )
DEBUG: allocated [a Const] ( ( + ( 1 ( 0 nil ) ) ) ( ( + ( 0 ( 0 nil ) ) ) nil ) ) from 0x600022b68 to 0x600022b88 ( 32 B )
DEBUG: allocated [a Const] ( ( < ( 2 ( 3 nil ) ) ) ( ( + ( 1 ( 0 nil ) ) ) ( ( + ( 0 ( 0 nil ) ) ) nil ) ) ) from 0x600022b88 to 0x600022ba8 ( 32 B )
DEBUG: allocated [a Const] ( if ( ( < ( 2 ( 3 nil ) ) ) ( ( + ( 1 ( 0 nil ) ) ) ( ( + ( 0 ( 0 nil ) ) ) nil ) ) ) ) from 0x600022ba8 to 0x600022bc8 ( 32 B )
DEBUG: allocated [a Boolean] #t from 0x600022bc8 to 0x600022bd8 ( 16 B )
DEBUG: allocated [an Integer] 1 from 0x600022bd8 to 0x600022bf0 ( 24 B )
1
> DEBUG: allocated [a Symbol] if from 0x600022bf0 to 0x600022c08 ( 24 B )
DEBUG: allocated [a Symbol] < from 0x600022c08 to 0x600022c20 ( 24 B )
DEBUG: allocated [an Integer] 3 from 0x600022c20 to 0x600022c38 ( 24 B )
DEBUG: allocated [an Integer] 2 from 0x600022c38 to 0x600022c50 ( 24 B )
DEBUG: allocated nil from 0x600022c50 to 0x600022c60 ( 16 B )
DEBUG: allocated [a Const] ( 2 nil ) from 0x600022c60 to 0x600022c80 ( 32 B )
DEBUG: allocated [a Const] ( 3 ( 2 nil ) ) from 0x600022c80 to 0x600022ca0 ( 32 B )
DEBUG: allocated [a Const] ( < ( 3 ( 2 nil ) ) ) from 0x600022ca0 to 0x600022cc0 ( 32 B )
DEBUG: allocated [a Symbol] + from 0x600022cc0 to 0x600022cd8 ( 24 B )
DEBUG: allocated [an Integer] 1 from 0x600022cd8 to 0x600022cf0 ( 24 B )
DEBUG: allocated [an Integer] 0 from 0x600022cf0 to 0x600022d08 ( 24 B )
DEBUG: allocated nil from 0x600022d08 to 0x600022d18 ( 16 B )
DEBUG: allocated [a Const] ( 0 nil ) from 0x600022d18 to 0x600022d38 ( 32 B )
DEBUG: allocated [a Const] ( 1 ( 0 nil ) ) from 0x600022d38 to 0x600022d58 ( 32 B )
DEBUG: allocated [a Const] ( + ( 1 ( 0 nil ) ) ) from 0x600022d58 to 0x600022d78 ( 32 B )
DEBUG: allocated [a Symbol] + from 0x600022d78 to 0x600022d90 ( 24 B )
DEBUG: allocated [an Integer] 0 from 0x600022d90 to 0x600022da8 ( 24 B )
DEBUG: allocated [an Integer] 0 from 0x600022da8 to 0x600022dc0 ( 24 B )
DEBUG: allocated nil from 0x600022dc0 to 0x600022dd0 ( 16 B )
DEBUG: allocated [a Const] ( 0 nil ) from 0x600022dd0 to 0x600022df0 ( 32 B )
DEBUG: allocated [a Const] ( 0 ( 0 nil ) ) from 0x600022df0 to 0x600022e10 ( 32 B )
DEBUG: allocated [a Const] ( + ( 0 ( 0 nil ) ) ) from 0x600022e10 to 0x600022e30 ( 32 B )
DEBUG: allocated nil from 0x600022e30 to 0x600022e40 ( 16 B )
DEBUG: allocated [a Const] ( ( + ( 0 ( 0 nil ) ) ) nil ) from 0x600022e40 to 0x600022e60 ( 32 B )
DEBUG: allocated [a Const] ( ( + ( 1 ( 0 nil ) ) ) ( ( + ( 0 ( 0 nil ) ) ) nil ) ) from 0x600022e60 to 0x600022e80 ( 32 B )
DEBUG: allocated [a Const] ( ( < ( 3 ( 2 nil ) ) ) ( ( + ( 1 ( 0 nil ) ) ) ( ( + ( 0 ( 0 nil ) ) ) nil ) ) ) from 0x600022e80 to 0x600022ea0 ( 32 B )
DEBUG: allocated [a Const] ( if ( ( < ( 3 ( 2 nil ) ) ) ( ( + ( 1 ( 0 nil ) ) ) ( ( + ( 0 ( 0 nil ) ) ) nil ) ) ) ) from 0x600022ea0 to 0x600022ec0 ( 32 B )
DEBUG: allocated [a Boolean] #f from 0x600022ec0 to 0x600022ed0 ( 16 B )
DEBUG: allocated [an Integer] 0 from 0x600022ed0 to 0x600022ee8 ( 24 B )
0
> DEBUG: allocated [a Symbol] define from 0x600022ee8 to 0x600022f00 ( 24 B )
DEBUG: allocated [a Symbol] not from 0x600022f00 to 0x600022f18 ( 24 B )
DEBUG: allocated [a Symbol] lambda from 0x600022f18 to 0x600022f30 ( 24 B )
DEBUG: allocated [a Symbol] bool from 0x600022f30 to 0x600022f48 ( 24 B )
DEBUG: allocated nil from 0x600022f48 to 0x600022f58 ( 16 B )
DEBUG: allocated [a Const] ( bool nil ) from 0x600022f58 to 0x600022f78 ( 32 B )
DEBUG: allocated [a Symbol] if from 0x600022f78 to 0x600022f90 ( 24 B )
DEBUG: allocated [a Symbol] bool from 0x600022f90 to 0x600022fa8 ( 24 B )
DEBUG: allocated [a Boolean] #f from 0x600022fa8 to 0x600022fb8 ( 16 B )
DEBUG: allocated [a Boolean] #t from 0x600022fb8 to 0x600022fc8 ( 16 B )
DEBUG: allocated nil from 0x600022fc8 to 0x600022fd8 ( 16 B )
DEBUG: allocated [a Const] ( #t nil ) from 0x600022fd8 to 0x600022ff8 ( 32 B )
DEBUG: allocated [a Const] ( #f ( #t nil ) ) from 0x600022ff8 to 0x600023018 ( 32 B )
DEBUG: allocated [a Const] ( bool ( #f ( #t nil ) ) ) from 0x600023018 to 0x600023038 ( 32 B )
DEBUG: allocated [a Const] ( if ( bool ( #f ( #t nil ) ) ) ) from 0x600023038 to 0x600023058 ( 32 B )
DEBUG: allocated nil from 0x600023058 to 0x600023068 ( 16 B )
DEBUG: allocated [a Const] ( ( if ( bool ( #f ( #t nil ) ) ) ) nil ) from 0x600023068 to 0x600023088 ( 32 B )
DEBUG: allocated [a Const] ( ( bool nil ) ( ( if ( bool ( #f ( #t nil ) ) ) ) nil ) ) from 0x600023088 to 0x6000230a8 ( 32 B )
DEBUG: allocated [a Const] ( lambda ( ( bool nil ) ( ( if ( bool ( #f ( #t nil ) ) ) ) nil ) ) ) from 0x6000230a8 to 0x6000230c8 ( 32 B )
DEBUG: allocated nil from 0x6000230c8 to 0x6000230d8 ( 16 B )
DEBUG: allocated [a Const] ( ( lambda ( ( bool nil ) ( ( if ( bool ( #f ( #t nil ) ) ) ) nil ) ) ) nil ) from 0x6000230d8 to 0x6000230f8 ( 32 B )
DEBUG: allocated [a Const] ( not ( ( lambda ( ( bool nil ) ( ( if ( bool ( #f ( #t nil ) ) ) ) nil ) ) ) nil ) ) from 0x6000230f8 to 0x600023118 ( 32 B )
DEBUG: allocated [a Const] ( define ( not ( ( lambda ( ( bool nil ) ( ( if ( bool ( #f ( #t nil ) ) ) ) nil ) ) ) nil ) ) ) from 0x600023118 to 0x600023138 ( 32 B )
DEBUG: allocated [a Void (scary, right?)] from 0x600023138 to 0x600023158 ( 32 B )
DEBUG: allocated [an Object]  from 0x600023158 to 0x600023168 ( 16 B )

> DEBUG: allocated [a Symbol] define from 0x600023168 to 0x600023180 ( 24 B )
DEBUG: allocated [a Symbol] and from 0x600023180 to 0x600023198 ( 24 B )
DEBUG: allocated [a Symbol] lambda from 0x600023198 to 0x6000231b0 ( 24 B )
DEBUG: allocated [a Symbol] a from 0x6000231b0 to 0x6000231c8 ( 24 B )
DEBUG: allocated [a Symbol] b from 0x6000231c8 to 0x6000231e0 ( 24 B )
DEBUG: allocated nil from 0x6000231e0 to 0x6000231f0 ( 16 B )
DEBUG: allocated [a Const] ( b nil ) from 0x6000231f0 to 0x600023210 ( 32 B )
DEBUG: allocated [a Const] ( a ( b nil ) ) from 0x600023210 to 0x600023230 ( 32 B )
DEBUG: allocated [a Symbol] if from 0x600023230 to 0x600023248 ( 24 B )
DEBUG: allocated [a Symbol] a from 0x600023248 to 0x600023260 ( 24 B )
DEBUG: allocated [a Symbol] b from 0x600023260 to 0x600023278 ( 24 B )
DEBUG: allocated [a Boolean] #f from 0x600023278 to 0x600023288 ( 16 B )
DEBUG: allocated nil from 0x600023288 to 0x600023298 ( 16 B )
DEBUG: allocated [a Const] ( #f nil ) from 0x600023298 to 0x6000232b8 ( 32 B )
DEBUG: allocated [a Const] ( b ( #f nil ) ) from 0x6000232b8 to 0x6000232d8 ( 32 B )
DEBUG: allocated [a Const] ( a ( b ( #f nil ) ) ) from 0x6000232d8 to 0x6000232f8 ( 32 B )
DEBUG: allocated [a Const] ( if ( a ( b ( #f nil ) ) ) ) from 0x6000232f8 to 0x600023318 ( 32 B )
DEBUG: allocated nil from 0x600023318 to 0x600023328 ( 16 B )
DEBUG: allocated [a Const] ( ( if ( a ( b ( #f nil ) ) ) ) nil ) from 0x600023328 to 0x600023348 ( 32 B )
DEBUG: allocated [a Const] ( ( a ( b nil ) ) ( ( if ( a ( b ( #f nil ) ) ) ) nil ) ) from 0x600023348 to 0x600023368 ( 32 B )
DEBUG: allocated [a Const] ( lambda ( ( a ( b nil ) ) ( ( if ( a ( b ( #f nil ) ) ) ) nil ) ) ) from 0x600023368 to 0x600023388 ( 32 B )
DEBUG: allocated nil from 0x600023388 to 0x600023398 ( 16 B )
DEBUG: allocated [a Const] ( ( lambda ( ( a ( b nil ) ) ( ( if ( a ( b ( #f nil ) ) ) ) nil ) ) ) nil ) from 0x600023398 to 0x6000233b8 ( 32 B )
DEBUG: allocated [a Const] ( and ( ( lambda ( ( a ( b nil ) ) ( ( if ( a ( b ( #f nil ) ) ) ) nil ) ) ) nil ) ) from 0x6000233b8 to 0x6000233d8 ( 32 B )
DEBUG: allocated [a Const] ( define ( and ( ( lambda ( ( a ( b nil ) ) ( ( if ( a ( b ( #f nil ) ) ) ) nil ) ) ) nil ) ) ) from 0x6000233d8 to 0x6000233f8 ( 32 B )
DEBUG: allocated [a Void (scary, right?)] from 0x6000233f8 to 0x600023418 ( 32 B )
DEBUG: allocated [an Object]  from 0x600023418 to 0x600023428 ( 16 B )

> DEBUG: allocated [a Symbol] define from 0x600023428 to 0x600023440 ( 24 B )
DEBUG: allocated [a Symbol] or from 0x600023440 to 0x600023458 ( 24 B )
DEBUG: allocated [a Symbol] lambda from 0x600023458 to 0x600023470 ( 24 B )
DEBUG: allocated [a Symbol] a from 0x600023470 to 0x600023488 ( 24 B )
DEBUG: allocated [a Symbol] b from 0x600023488 to 0x6000234a0 ( 24 B )
DEBUG: allocated nil from 0x6000234a0 to 0x6000234b0 ( 16 B )
DEBUG: allocated [a Const] ( b nil ) from 0x6000234b0 to 0x6000234d0 ( 32 B )
DEBUG: allocated [a Const] ( a ( b nil ) ) from 0x6000234d0 to 0x6000234f0 ( 32 B )
DEBUG: allocated [a Symbol] if from 0x6000234f0 to 0x600023508 ( 24 B )
DEBUG: allocated [a Symbol] a from 0x600023508 to 0x600023520 ( 24 B )
DEBUG: allocated [a Boolean] #t from 0x600023520 to 0x600023530 ( 16 B )
DEBUG: allocated [a Symbol] b from 0x600023530 to 0x600023548 ( 24 B )
DEBUG: allocated nil from 0x600023548 to 0x600023558 ( 16 B )
DEBUG: allocated [a Const] ( b nil ) from 0x600023558 to 0x600023578 ( 32 B )
DEBUG: allocated [a Const] ( #t ( b nil ) ) from 0x600023578 to 0x600023598 ( 32 B )
DEBUG: allocated [a Const] ( a ( #t ( b nil ) ) ) from 0x600023598 to 0x6000235b8 ( 32 B )
DEBUG: allocated [a Const] ( if ( a ( #t ( b nil ) ) ) ) from 0x6000235b8 to 0x6000235d8 ( 32 B )
DEBUG: allocated nil from 0x6000235d8 to 0x6000235e8 ( 16 B )
DEBUG: allocated [a Const] ( ( if ( a ( #t ( b nil ) ) ) ) nil ) from 0x6000235e8 to 0x600023608 ( 32 B )
DEBUG: allocated [a Const] ( ( a ( b nil ) ) ( ( if ( a ( #t ( b nil ) ) ) ) nil ) ) from 0x600023608 to 0x600023628 ( 32 B )
DEBUG: allocated [a Const] ( lambda ( ( a ( b nil ) ) ( ( if ( a ( #t ( b nil ) ) ) ) nil ) ) ) from 0x600023628 to 0x600023648 ( 32 B )
DEBUG: allocated nil from 0x600023648 to 0x600023658 ( 16 B )
DEBUG: allocated [a Const] ( ( lambda ( ( a ( b nil ) ) ( ( if ( a ( #t ( b nil ) ) ) ) nil ) ) ) nil ) from 0x600023658 to 0x600023678 ( 32 B )
DEBUG: allocated [a Const] ( or ( ( lambda ( ( a ( b nil ) ) ( ( if ( a ( #t ( b nil ) ) ) ) nil ) ) ) nil ) ) from 0x600023678 to 0x600023698 ( 32 B )
DEBUG: allocated [a Const] ( define ( or ( ( lambda ( ( a ( b nil ) ) ( ( if ( a ( #t ( b nil ) ) ) ) nil ) ) ) nil ) ) ) from 0x600023698 to 0x6000236b8 ( 32 B )
DEBUG: allocated [a Void (scary, right?)] from 0x6000236b8 to 0x6000236d8 ( 32 B )
DEBUG: allocated [an Object]  from 0x6000236d8 to 0x6000236e8 ( 16 B )

> DEBUG: allocated [a Symbol] define from 0x6000236e8 to 0x600023700 ( 24 B )
DEBUG: allocated [a Symbol] square from 0x600023700 to 0x600023718 ( 24 B )
DEBUG: allocated [a Symbol] lambda from 0x600023718 to 0x600023730 ( 24 B )
DEBUG: allocated [a Symbol] n from 0x600023730 to 0x600023748 ( 24 B )
DEBUG: allocated nil from 0x600023748 to 0x600023758 ( 16 B )
DEBUG: allocated [a Const] ( n nil ) from 0x600023758 to 0x600023778 ( 32 B )
DEBUG: allocated [a Symbol] * from 0x600023778 to 0x600023790 ( 24 B )
DEBUG: allocated [a Symbol] n from 0x600023790 to 0x6000237a8 ( 24 B )
DEBUG: allocated [a Symbol] n from 0x6000237a8 to 0x6000237c0 ( 24 B )
DEBUG: allocated nil from 0x6000237c0 to 0x6000237d0 ( 16 B )
DEBUG: mode set to always append to end
DEBUG: new block from 0x60006d9c0 to 0x60006e9c0 ( 4096 B )
DEBUG: allocated [a Const] ( n nil ) from 0x60006d9c0 to 0x60006d9e0 ( 32 B )
DEBUG: allocated [a Const] ( n ( n nil ) ) from 0x60006d9e0 to 0x60006da00 ( 32 B )
DEBUG: allocated [a Const] ( * ( n ( n nil ) ) ) from 0x60006da00 to 0x60006da20 ( 32 B )
DEBUG: allocated nil from 0x60006da20 to 0x60006da30 ( 16 B )
DEBUG: allocated [a Const] ( ( * ( n ( n nil ) ) ) nil ) from 0x60006da30 to 0x60006da50 ( 32 B )
DEBUG: allocated [a Const] ( ( n nil ) ( ( * ( n ( n nil ) ) ) nil ) ) from 0x60006da50 to 0x60006da70 ( 32 B )
DEBUG: allocated [a Const] ( lambda ( ( n nil ) ( ( * ( n ( n nil ) ) ) nil ) ) ) from 0x60006da70 to 0x60006da90 ( 32 B )
DEBUG: allocated nil from 0x60006da90 to 0x60006daa0 ( 16 B )
DEBUG: allocated [a Const] ( ( lambda ( ( n nil ) ( ( * ( n ( n nil ) ) ) nil ) ) ) nil ) from 0x60006daa0 to 0x60006dac0 ( 32 B )
DEBUG: allocated [a Const] ( square ( ( lambda ( ( n nil ) ( ( * ( n ( n nil ) ) ) nil ) ) ) nil ) ) from 0x60006dac0 to 0x60006dae0 ( 32 B )
DEBUG: allocated [a Const] ( define ( square ( ( lambda ( ( n nil ) ( ( * ( n ( n nil ) ) ) nil ) ) ) nil ) ) ) from 0x60006dae0 to 0x60006db00 ( 32 B )
DEBUG: allocated [a Void (scary, right?)] from 0x60006db00 to 0x60006db20 ( 32 B )
DEBUG: allocated [an Object]  from 0x60006db20 to 0x60006db30 ( 16 B )

> DEBUG: allocated [a Symbol] define from 0x60006db30 to 0x60006db48 ( 24 B )
DEBUG: allocated [a Symbol] fac from 0x60006db48 to 0x60006db60 ( 24 B )
DEBUG: allocated [a Symbol] lambda from 0x60006db60 to 0x60006db78 ( 24 B )
DEBUG: allocated [a Symbol] n from 0x60006db78 to 0x60006db90 ( 24 B )
DEBUG: allocated nil from 0x60006db90 to 0x60006dba0 ( 16 B )
DEBUG: allocated [a Const] ( n nil ) from 0x60006dba0 to 0x60006dbc0 ( 32 B )
DEBUG: allocated [a Symbol] if from 0x60006dbc0 to 0x60006dbd8 ( 24 B )
DEBUG: allocated [a Symbol] = from 0x60006dbd8 to 0x60006dbf0 ( 24 B )
DEBUG: allocated [a Symbol] n from 0x60006dbf0 to 0x60006dc08 ( 24 B )
DEBUG: allocated [an Integer] 1 from 0x60006dc08 to 0x60006dc20 ( 24 B )
DEBUG: allocated nil from 0x60006dc20 to 0x60006dc30 ( 16 B )
DEBUG: allocated [a Const] ( 1 nil ) from 0x60006dc30 to 0x60006dc50 ( 32 B )
DEBUG: allocated [a Const] ( n ( 1 nil ) ) from 0x60006dc50 to 0x60006dc70 ( 32 B )
DEBUG: allocated [a Const] ( = ( n ( 1 nil ) ) ) from 0x60006dc70 to 0x60006dc90 ( 32 B )
DEBUG: allocated [an Integer] 1 from 0x60006dc90 to 0x60006dca8 ( 24 B )
DEBUG: allocated [a Symbol] * from 0x60006dca8 to 0x60006dcc0 ( 24 B )
DEBUG: allocated [a Symbol] n from 0x60006dcc0 to 0x60006dcd8 ( 24 B )
DEBUG: allocated [a Symbol] fac from 0x60006dcd8 to 0x60006dcf0 ( 24 B )
DEBUG: allocated [a Symbol] - from 0x60006dcf0 to 0x60006dd08 ( 24 B )
DEBUG: allocated [a Symbol] n from 0x60006dd08 to 0x60006dd20 ( 24 B )
DEBUG: allocated [an Integer] 1 from 0x60006dd20 to 0x60006dd38 ( 24 B )
DEBUG: allocated nil from 0x60006dd38 to 0x60006dd48 ( 16 B )
DEBUG: allocated [a Const] ( 1 nil ) from 0x60006dd48 to 0x60006dd68 ( 32 B )
DEBUG: allocated [a Const] ( n ( 1 nil ) ) from 0x60006dd68 to 0x60006dd88 ( 32 B )
DEBUG: allocated [a Const] ( - ( n ( 1 nil ) ) ) from 0x60006dd88 to 0x60006dda8 ( 32 B )
DEBUG: allocated nil from 0x60006dda8 to 0x60006ddb8 ( 16 B )
DEBUG: allocated [a Const] ( ( - ( n ( 1 nil ) ) ) nil ) from 0x60006ddb8 to 0x60006ddd8 ( 32 B )
DEBUG: allocated [a Const] ( fac ( ( - ( n ( 1 nil ) ) ) nil ) ) from 0x60006ddd8 to 0x60006ddf8 ( 32 B )
DEBUG: allocated nil from 0x60006ddf8 to 0x60006de08 ( 16 B )
DEBUG: allocated [a Const] ( ( fac ( ( - ( n ( 1 nil ) ) ) nil ) ) nil ) from 0x60006de08 to 0x60006de28 ( 32 B )
DEBUG: allocated [a Const] ( n ( ( fac ( ( - ( n ( 1 nil ) ) ) nil ) ) nil ) ) from 0x60006de28 to 0x60006de48 ( 32 B )
DEBUG: allocated [a Const] ( * ( n ( ( fac ( ( - ( n ( 1 nil ) ) ) nil ) ) nil ) ) ) from 0x60006de48 to 0x60006de68 ( 32 B )
DEBUG: allocated nil from 0x60006de68 to 0x60006de78 ( 16 B )
DEBUG: allocated [a Const] ( ( * ( n ( ( fac ( ( - ( n ( 1 nil ) ) ) nil ) ) nil ) ) ) nil ) from 0x60006de78 to 0x60006de98 ( 32 B )
DEBUG: allocated [a Const] ( 1 ( ( * ( n ( ( fac ( ( - ( n ( 1 nil ) ) ) nil ) ) nil ) ) ) nil ) ) from 0x60006de98 to 0x60006deb8 ( 32 B )
DEBUG: allocated [a Const] ( ( = ( n ( 1 nil ) ) ) ( 1 ( ( * ( n ( ( fac ( ( - ( n ( 1 nil ) ) ) nil ) ) nil ) ) ) nil ) ) ) from 0x60006deb8 to 0x60006ded8 ( 32 B )
DEBUG: allocated [a Const] ( if ( ( = ( n ( 1 nil ) ) ) ( 1 ( ( * ( n ( ( fac ( ( - ( n ( 1 nil ) ) ) nil ) ) nil ) ) ) nil ) ) ) ) from 0x60006ded8 to 0x60006def8 ( 32 B )
DEBUG: allocated nil from 0x60006def8 to 0x60006df08 ( 16 B )
DEBUG: allocated [a Const] ( ( if ( ( = ( n ( 1 nil ) ) ) ( 1 ( ( * ( n ( ( fac ( ( - ( n ( 1 nil ) ) ) nil ) ) nil ) ) ) nil ) ) ) ) nil ) from 0x60006df08 to 0x60006df28 ( 32 B )
DEBUG: allocated [a Const] ( ( n nil ) ( ( if ( ( = ( n ( 1 nil ) ) ) ( 1 ( ( * ( n ( ( fac ( ( - ( n ( 1 nil ) ) ) nil ) ) nil ) ) ) nil ) ) ) ) nil ) ) from 0x60006df28 to 0x60006df48 ( 32 B )
DEBUG: allocated [a Const] ( lambda ( ( n nil ) ( ( if ( ( = ( n ( 1 nil ) ) ) ( 1 ( ( * ( n ( ( fac ( ( - ( n ( 1 nil ) ) ) nil ) ) nil ) ) ) nil ) ) ) ) nil ) ) ) from 0x60006df48 to 0x60006df68 ( 32 B )
DEBUG: allocated nil from 0x60006df68 to 0x60006df78 ( 16 B )
DEBUG: allocated [a Const] ( ( lambda ( ( n nil ) ( ( if ( ( = ( n ( 1 nil ) ) ) ( 1 ( ( * ( n ( ( fac ( ( - ( n ( 1 nil ) ) ) nil ) ) nil ) ) ) nil ) ) ) ) nil ) ) ) nil ) from 0x60006df78 to 0x60006df98 ( 32 B )
DEBUG: allocated [a Const] ( fac ( ( lambda ( ( n nil ) ( ( if ( ( = ( n ( 1 nil ) ) ) ( 1 ( ( * ( n ( ( fac ( ( - ( n ( 1 nil ) ) ) nil ) ) nil ) ) ) nil ) ) ) ) nil ) ) ) nil ) ) from 0x60006df98 to 0x60006dfb8 ( 32 B )
DEBUG: allocated [a Const] ( define ( fac ( ( lambda ( ( n nil ) ( ( if ( ( = ( n ( 1 nil ) ) ) ( 1 ( ( * ( n ( ( fac ( ( - ( n ( 1 nil ) ) ) nil ) ) nil ) ) ) nil ) ) ) ) nil ) ) ) nil ) ) ) from 0x60006dfb8 to 0x60006dfd8 ( 32 B )
DEBUG: allocated [a Void (scary, right?)] from 0x60006dfd8 to 0x60006dff8 ( 32 B )
DEBUG: allocated [an Object]  from 0x60006dff8 to 0x60006e008 ( 16 B )

> DEBUG: allocated [a Symbol] define from 0x60006e008 to 0x60006e020 ( 24 B )
DEBUG: allocated [a Symbol] a from 0x60006e020 to 0x60006e038 ( 24 B )
DEBUG: allocated [an Integer] 10 from 0x60006e038 to 0x60006e050 ( 24 B )
DEBUG: allocated nil from 0x60006e050 to 0x60006e060 ( 16 B )
DEBUG: allocated [a Const] ( 10 nil ) from 0x60006e060 to 0x60006e080 ( 32 B )
DEBUG: allocated [a Const] ( a ( 10 nil ) ) from 0x60006e080 to 0x60006e0a0 ( 32 B )
DEBUG: allocated [a Const] ( define ( a ( 10 nil ) ) ) from 0x60006e0a0 to 0x60006e0c0 ( 32 B )
DEBUG: allocated [an Object]  from 0x60006e0c0 to 0x60006e0d0 ( 16 B )

> DEBUG: allocated [a Symbol] define from 0x60006e0d0 to 0x60006e0e8 ( 24 B )
DEBUG: allocated [a Symbol] b from 0x60006e0e8 to 0x60006e100 ( 24 B )
DEBUG: allocated [an Integer] 20 from 0x60006e100 to 0x60006e118 ( 24 B )
DEBUG: allocated nil from 0x60006e118 to 0x60006e128 ( 16 B )
DEBUG: allocated [a Const] ( 20 nil ) from 0x60006e128 to 0x60006e148 ( 32 B )
DEBUG: allocated [a Const] ( b ( 20 nil ) ) from 0x60006e148 to 0x60006e168 ( 32 B )
DEBUG: allocated [a Const] ( define ( b ( 20 nil ) ) ) from 0x60006e168 to 0x60006e188 ( 32 B )
DEBUG: allocated [an Object]  from 0x60006e188 to 0x60006e198 ( 16 B )

> DEBUG: allocated [a Symbol] not from 0x60006e198 to 0x60006e1b0 ( 24 B )
DEBUG: allocated [a Boolean] #t from 0x60006e1b0 to 0x60006e1c0 ( 16 B )
DEBUG: allocated nil from 0x60006e1c0 to 0x60006e1d0 ( 16 B )
DEBUG: allocated [a Const] ( #t nil ) from 0x60006e1d0 to 0x60006e1f0 ( 32 B )
DEBUG: allocated [a Const] ( not ( #t nil ) ) from 0x60006e1f0 to 0x60006e210 ( 32 B )
#f
> DEBUG: allocated [a Symbol] not from 0x60006e210 to 0x60006e228 ( 24 B )
DEBUG: allocated [a Symbol] = from 0x60006e228 to 0x60006e240 ( 24 B )
DEBUG: allocated [an Integer] 3 from 0x60006e240 to 0x60006e258 ( 24 B )
DEBUG: allocated [an Integer] 4 from 0x60006e258 to 0x60006e270 ( 24 B )
DEBUG: allocated nil from 0x60006e270 to 0x60006e280 ( 16 B )
DEBUG: allocated [a Const] ( 4 nil ) from 0x60006e280 to 0x60006e2a0 ( 32 B )
DEBUG: allocated [a Const] ( 3 ( 4 nil ) ) from 0x60006e2a0 to 0x60006e2c0 ( 32 B )
DEBUG: allocated [a Const] ( = ( 3 ( 4 nil ) ) ) from 0x60006e2c0 to 0x60006e2e0 ( 32 B )
DEBUG: allocated nil from 0x60006e2e0 to 0x60006e2f0 ( 16 B )
DEBUG: allocated [a Const] ( ( = ( 3 ( 4 nil ) ) ) nil ) from 0x60006e2f0 to 0x60006e310 ( 32 B )
DEBUG: allocated [a Const] ( not ( ( = ( 3 ( 4 nil ) ) ) nil ) ) from 0x60006e310 to 0x60006e330 ( 32 B )
DEBUG: allocated [a Boolean] #f from 0x60006e330 to 0x60006e340 ( 16 B )
#t
> DEBUG: allocated [a Symbol] and from 0x60006e340 to 0x60006e358 ( 24 B )
DEBUG: allocated [a Boolean] #t from 0x60006e358 to 0x60006e368 ( 16 B )
DEBUG: allocated [a Boolean] #t from 0x60006e368 to 0x60006e378 ( 16 B )
DEBUG: allocated nil from 0x60006e378 to 0x60006e388 ( 16 B )
DEBUG: allocated [a Const] ( #t nil ) from 0x60006e388 to 0x60006e3a8 ( 32 B )
DEBUG: allocated [a Const] ( #t ( #t nil ) ) from 0x60006e3a8 to 0x60006e3c8 ( 32 B )
DEBUG: allocated [a Const] ( and ( #t ( #t nil ) ) ) from 0x60006e3c8 to 0x60006e3e8 ( 32 B )
#t
> DEBUG: allocated [a Symbol] square from 0x60006e3e8 to 0x60006e400 ( 24 B )
DEBUG: allocated [a Symbol] a from 0x60006e400 to 0x60006e418 ( 24 B )
DEBUG: allocated nil from 0x60006e418 to 0x60006e428 ( 16 B )
DEBUG: allocated [a Const] ( a nil ) from 0x60006e428 to 0x60006e448 ( 32 B )
DEBUG: allocated [a Const] ( square ( a nil ) ) from 0x60006e448 to 0x60006e468 ( 32 B )
DEBUG: allocated [an Integer] 100 from 0x60006e468 to 0x60006e480 ( 24 B )
100
> DEBUG: allocated [a Symbol] square from 0x60006e480 to 0x60006e498 ( 24 B )
DEBUG: allocated [a Symbol] * from 0x60006e498 to 0x60006e4b0 ( 24 B )
DEBUG: allocated [an Integer] 2 from 0x60006e4b0 to 0x60006e4c8 ( 24 B )
DEBUG: allocated [an Integer] 1 from 0x60006e4c8 to 0x60006e4e0 ( 24 B )
DEBUG: allocated nil from 0x60006e4e0 to 0x60006e4f0 ( 16 B )
DEBUG: allocated [a Const] ( 1 nil ) from 0x60006e4f0 to 0x60006e510 ( 32 B )
DEBUG: allocated [a Const] ( 2 ( 1 nil ) ) from 0x60006e510 to 0x60006e530 ( 32 B )
DEBUG: allocated [a Const] ( * ( 2 ( 1 nil ) ) ) from 0x60006e530 to 0x60006e550 ( 32 B )
DEBUG: allocated nil from 0x60006e550 to 0x60006e560 ( 16 B )
DEBUG: allocated [a Const] ( ( * ( 2 ( 1 nil ) ) ) nil ) from 0x60006e560 to 0x60006e580 ( 32 B )
DEBUG: allocated [a Const] ( square ( ( * ( 2 ( 1 nil ) ) ) nil ) ) from 0x60006e580 to 0x60006e5a0 ( 32 B )
DEBUG: allocated [an Integer] 2 from 0x60006e5a0 to 0x60006e5b8 ( 24 B )
DEBUG: allocated [an Integer] 4 from 0x60006e5b8 to 0x60006e5d0 ( 24 B )
4
> DEBUG: allocated [a Symbol] fac from 0x60006e5d0 to 0x60006e5e8 ( 24 B )
DEBUG: allocated [an Integer] 4 from 0x60006e5e8 to 0x60006e600 ( 24 B )
DEBUG: allocated nil from 0x60006e600 to 0x60006e610 ( 16 B )
DEBUG: allocated [a Const] ( 4 nil ) from 0x60006e610 to 0x60006e630 ( 32 B )
DEBUG: allocated [a Const] ( fac ( 4 nil ) ) from 0x60006e630 to 0x60006e650 ( 32 B )
DEBUG: allocated [a Boolean] #f from 0x60006e650 to 0x60006e660 ( 16 B )
DEBUG: allocated [an Integer] 3 from 0x60006e660 to 0x60006e678 ( 24 B )
DEBUG: allocated [a Boolean] #f from 0x60006e678 to 0x60006e688 ( 16 B )
DEBUG: allocated [an Integer] 2 from 0x60006e688 to 0x60006e6a0 ( 24 B )
DEBUG: allocated [a Boolean] #f from 0x60006e6a0 to 0x60006e6b0 ( 16 B )
DEBUG: allocated [an Integer] 1 from 0x60006e6b0 to 0x60006e6c8 ( 24 B )
DEBUG: allocated [a Boolean] #t from 0x60006e6c8 to 0x60006e6d8 ( 16 B )
DEBUG: allocated [an Integer] 2 from 0x60006e6d8 to 0x60006e6f0 ( 24 B )
DEBUG: allocated [an Integer] 6 from 0x60006e6f0 to 0x60006e708 ( 24 B )
DEBUG: allocated [an Integer] 24 from 0x60006e708 to 0x60006e720 ( 24 B )
24
> DEBUG: allocated [a Symbol] define from 0x60006e720 to 0x60006e738 ( 24 B )
DEBUG: allocated [a Symbol] cadr from 0x60006e738 to 0x60006e750 ( 24 B )
DEBUG: allocated [a Symbol] lambda from 0x60006e750 to 0x60006e768 ( 24 B )
DEBUG: allocated [a Symbol] l from 0x60006e768 to 0x60006e780 ( 24 B )
DEBUG: allocated nil from 0x60006e780 to 0x60006e790 ( 16 B )
DEBUG: allocated [a Const] ( l nil ) from 0x60006e790 to 0x60006e7b0 ( 32 B )
DEBUG: allocated [a Symbol] car from 0x60006e7b0 to 0x60006e7c8 ( 24 B )
DEBUG: allocated [a Symbol] cdr from 0x60006e7c8 to 0x60006e7e0 ( 24 B )
DEBUG: allocated [a Symbol] l from 0x60006e7e0 to 0x60006e7f8 ( 24 B )
DEBUG: allocated nil from 0x60006e7f8 to 0x60006e808 ( 16 B )
DEBUG: allocated [a Const] ( l nil ) from 0x60006e808 to 0x60006e828 ( 32 B )
DEBUG: allocated [a Const] ( cdr ( l nil ) ) from 0x60006e828 to 0x60006e848 ( 32 B )
DEBUG: allocated nil from 0x60006e848 to 0x60006e858 ( 16 B )
DEBUG: allocated [a Const] ( ( cdr ( l nil ) ) nil ) from 0x60006e858 to 0x60006e878 ( 32 B )
DEBUG: allocated [a Const] ( car ( ( cdr ( l nil ) ) nil ) ) from 0x60006e878 to 0x60006e898 ( 32 B )
DEBUG: allocated nil from 0x60006e898 to 0x60006e8a8 ( 16 B )
DEBUG: allocated [a Const] ( ( car ( ( cdr ( l nil ) ) nil ) ) nil ) from 0x60006e8a8 to 0x60006e8c8 ( 32 B )
DEBUG: allocated [a Const] ( ( l nil ) ( ( car ( ( cdr ( l nil ) ) nil ) ) nil ) ) from 0x60006e8c8 to 0x60006e8e8 ( 32 B )
DEBUG: allocated [a Const] ( lambda ( ( l nil ) ( ( car ( ( cdr ( l nil ) ) nil ) ) nil ) ) ) from 0x60006e8e8 to 0x60006e908 ( 32 B )
DEBUG: allocated nil from 0x60006e908 to 0x60006e918 ( 16 B )
DEBUG: allocated [a Const] ( ( lambda ( ( l nil ) ( ( car ( ( cdr ( l nil ) ) nil ) ) nil ) ) ) nil ) from 0x60006e918 to 0x60006e938 ( 32 B )
DEBUG: allocated [a Const] ( cadr ( ( lambda ( ( l nil ) ( ( car ( ( cdr ( l nil ) ) nil ) ) nil ) ) ) nil ) ) from 0x60006e938 to 0x60006e958 ( 32 B )
DEBUG: allocated [a Const] ( define ( cadr ( ( lambda ( ( l nil ) ( ( car ( ( cdr ( l nil ) ) nil ) ) nil ) ) ) nil ) ) ) from 0x60006e958 to 0x60006e978 ( 32 B )
DEBUG: allocated [a Void (scary, right?)] from 0x60006e978 to 0x60006e998 ( 32 B )
DEBUG: allocated [an Object]  from 0x60006e998 to 0x60006e9a8 ( 16 B )

> DEBUG: allocated [a Symbol] define from 0x60006e9a8 to 0x60006e9c0 ( 24 B )
DEBUG: collecting garbage to free 24 B
DEBUG:   freed nil from 0x600022958 to 0x600022968 ( 16 B )
DEBUG:   freed [a Const] ( 3 nil ) from 0x600022968 to 0x600022988 ( 32 B )
DEBUG:   freed [a Const] ( 2 ( 3 nil ) ) from 0x600022988 to 0x6000229a8 ( 32 B )
DEBUG:   freed [a Const] ( < ( 2 ( 3 nil ) ) ) from 0x6000229a8 to 0x6000229c8 ( 32 B )
DEBUG:   freed [a Symbol] + from 0x6000229c8 to 0x6000229e0 ( 24 B )
DEBUG:   freed [an Integer] 1 from 0x6000229e0 to 0x6000229f8 ( 24 B )
DEBUG:   freed [an Integer] 0 from 0x6000229f8 to 0x600022a10 ( 24 B )
DEBUG:   freed nil from 0x600022a10 to 0x600022a20 ( 16 B )
DEBUG:   freed [a Const] ( 0 nil ) from 0x600022a20 to 0x600022a40 ( 32 B )
DEBUG:   freed [a Const] ( 1 ( 0 nil ) ) from 0x600022a40 to 0x600022a60 ( 32 B )
DEBUG:   freed [a Const] ( + ( 1 ( 0 nil ) ) ) from 0x600022a60 to 0x600022a80 ( 32 B )
DEBUG:   freed [a Symbol] + from 0x600022a80 to 0x600022a98 ( 24 B )
DEBUG:   freed [an Integer] 0 from 0x600022a98 to 0x600022ab0 ( 24 B )
DEBUG:   freed [an Integer] 0 from 0x600022ab0 to 0x600022ac8 ( 24 B )
DEBUG:   freed nil from 0x600022ac8 to 0x600022ad8 ( 16 B )
DEBUG:   freed [a Const] ( 0 nil ) from 0x600022ad8 to 0x600022af8 ( 32 B )
DEBUG:   freed [a Const] ( 0 ( 0 nil ) ) from 0x600022af8 to 0x600022b18 ( 32 B )
DEBUG:   freed [a Const] ( + ( 0 ( 0 nil ) ) ) from 0x600022b18 to 0x600022b38 ( 32 B )
DEBUG:   freed nil from 0x600022b38 to 0x600022b48 ( 16 B )
DEBUG:   freed [a Const] ( ( + ( 0 ( 0 nil ) ) ) nil ) from 0x600022b48 to 0x600022b68 ( 32 B )
DEBUG:   freed [a Const] ( ( + ( 1 ( 0 nil ) ) ) ( ( + ( 0 ( 0 nil ) ) ) nil ) ) from 0x600022b68 to 0x600022b88 ( 32 B )
DEBUG:   freed [a Const] ( ( < ( 2 ( 3 nil ) ) ) ( ( + ( 1 ( 0 nil ) ) ) ( ( + ( 0 ( 0 nil ) ) ) nil ) ) ) from 0x600022b88 to 0x600022ba8 ( 32 B )
DEBUG:   freed [a Const] ( if ( ( < ( 2 ( 3 nil ) ) ) ( ( + ( 1 ( 0 nil ) ) ) ( ( + ( 0 ( 0 nil ) ) ) nil ) ) ) ) from 0x600022ba8 to 0x600022bc8 ( 32 B )
DEBUG:   freed [a Boolean] #t from 0x600022bc8 to 0x600022bd8 ( 16 B )
DEBUG:   freed [an Integer] 1 from 0x600022bd8 to 0x600022bf0 ( 24 B )
DEBUG:   freed [a Symbol] if from 0x600022bf0 to 0x600022c08 ( 24 B )
DEBUG:   freed [a Symbol] < from 0x600022c08 to 0x600022c20 ( 24 B )
DEBUG:   freed [an Integer] 3 from 0x600022c20 to 0x600022c38 ( 24 B )
DEBUG:   freed [an Integer] 2 from 0x600022c38 to 0x600022c50 ( 24 B )
DEBUG:   freed nil from 0x600022c50 to 0x600022c60 ( 16 B )
DEBUG:   freed [a Const] ( 2 nil ) from 0x600022c60 to 0x600022c80 ( 32 B )
DEBUG:   freed [a Const] ( 3 ( 2 nil ) ) from 0x600022c80 to 0x600022ca0 ( 32 B )
DEBUG:   freed [a Const] ( < ( 3 ( 2 nil ) ) ) from 0x600022ca0 to 0x600022cc0 ( 32 B )
DEBUG:   freed [a Symbol] + from 0x600022cc0 to 0x600022cd8 ( 24 B )
DEBUG:   freed [an Integer] 1 from 0x600022cd8 to 0x600022cf0 ( 24 B )
DEBUG:   freed [an Integer] 0 from 0x600022cf0 to 0x600022d08 ( 24 B )
DEBUG:   freed nil from 0x600022d08 to 0x600022d18 ( 16 B )
DEBUG:   freed [a Const] ( 0 nil ) from 0x600022d18 to 0x600022d38 ( 32 B )
DEBUG:   freed [a Const] ( 1 ( 0 nil ) ) from 0x600022d38 to 0x600022d58 ( 32 B )
DEBUG:   freed [a Const] ( + ( 1 ( 0 nil ) ) ) from 0x600022d58 to 0x600022d78 ( 32 B )
DEBUG:   freed [a Symbol] + from 0x600022d78 to 0x600022d90 ( 24 B )
DEBUG:   freed [an Integer] 0 from 0x600022d90 to 0x600022da8 ( 24 B )
DEBUG:   freed [an Integer] 0 from 0x600022da8 to 0x600022dc0 ( 24 B )
DEBUG:   freed nil from 0x600022dc0 to 0x600022dd0 ( 16 B )
DEBUG:   freed [a Const] ( 0 nil ) from 0x600022dd0 to 0x600022df0 ( 32 B )
DEBUG:   freed [a Const] ( 0 ( 0 nil ) ) from 0x600022df0 to 0x600022e10 ( 32 B )
DEBUG:   freed [a Const] ( + ( 0 ( 0 nil ) ) ) from 0x600022e10 to 0x600022e30 ( 32 B )
DEBUG:   freed nil from 0x600022e30 to 0x600022e40 ( 16 B )
DEBUG:   freed [a Const] ( ( + ( 0 ( 0 nil ) ) ) nil ) from 0x600022e40 to 0x600022e60 ( 32 B )
DEBUG:   freed [a Const] ( ( + ( 1 ( 0 nil ) ) ) ( ( + ( 0 ( 0 nil ) ) ) nil ) ) from 0x600022e60 to 0x600022e80 ( 32 B )
DEBUG:   freed [a Const] ( ( < ( 3 ( 2 nil ) ) ) ( ( + ( 1 ( 0 nil ) ) ) ( ( + ( 0 ( 0 nil ) ) ) nil ) ) ) from 0x600022e80 to 0x600022ea0 ( 32 B )
DEBUG:   freed [a Const] ( if ( ( < ( 3 ( 2 nil ) ) ) ( ( + ( 1 ( 0 nil ) ) ) ( ( + ( 0 ( 0 nil ) ) ) nil ) ) ) ) from 0x600022ea0 to 0x600022ec0 ( 32 B )
DEBUG:   freed [a Boolean] #f from 0x600022ec0 to 0x600022ed0 ( 16 B )
DEBUG:   freed [an Integer] 0 from 0x600022ed0 to 0x600022ee8 ( 24 B )
DEBUG:   freed [a Symbol] define from 0x600022ee8 to 0x600022f00 ( 24 B )
DEBUG:   freed [a Symbol] not from 0x600022f00 to 0x600022f18 ( 24 B )
DEBUG:   freed [a Symbol] lambda from 0x600022f18 to 0x600022f30 ( 24 B )
DEBUG:   freed nil from 0x600023058 to 0x600023068 ( 16 B )
DEBUG:   freed [a Const] ( ( if ( bool ( #f ( #t nil ) ) ) ) nil ) from 0x600023068 to 0x600023088 ( 32 B )
DEBUG:   freed [a Const] ( ( bool nil ) ( ( if ( bool ( #f ( #t nil ) ) ) ) nil ) ) from 0x600023088 to 0x6000230a8 ( 32 B )
DEBUG:   freed [a Const] ( lambda ( ( bool nil ) ( ( if ( bool ( #f ( #t nil ) ) ) ) nil ) ) ) from 0x6000230a8 to 0x6000230c8 ( 32 B )
DEBUG:   freed nil from 0x6000230c8 to 0x6000230d8 ( 16 B )
DEBUG:   freed [a Const] ( ( lambda ( ( bool nil ) ( ( if ( bool ( #f ( #t nil ) ) ) ) nil ) ) ) nil ) from 0x6000230d8 to 0x6000230f8 ( 32 B )
DEBUG:   freed [a Const] ( not ( ( lambda ( ( bool nil ) ( ( if ( bool ( #f ( #t nil ) ) ) ) nil ) ) ) nil ) ) from 0x6000230f8 to 0x600023118 ( 32 B )
DEBUG:   freed [a Const] ( define ( not ( ( lambda ( ( bool nil ) ( ( if ( bool ( #f ( #t nil ) ) ) ) nil ) ) ) nil ) ) ) from 0x600023118 to 0x600023138 ( 32 B )
DEBUG:   freed [an Object]  from 0x600023158 to 0x600023168 ( 16 B )
DEBUG:   freed [a Symbol] define from 0x600023168 to 0x600023180 ( 24 B )
DEBUG:   freed [a Symbol] and from 0x600023180 to 0x600023198 ( 24 B )
DEBUG:   freed [a Symbol] lambda from 0x600023198 to 0x6000231b0 ( 24 B )
DEBUG:   freed nil from 0x600023318 to 0x600023328 ( 16 B )
DEBUG:   freed [a Const] ( ( if ( a ( b ( #f nil ) ) ) ) nil ) from 0x600023328 to 0x600023348 ( 32 B )
DEBUG:   freed [a Const] ( ( a ( b nil ) ) ( ( if ( a ( b ( #f nil ) ) ) ) nil ) ) from 0x600023348 to 0x600023368 ( 32 B )
DEBUG:   freed [a Const] ( lambda ( ( a ( b nil ) ) ( ( if ( a ( b ( #f nil ) ) ) ) nil ) ) ) from 0x600023368 to 0x600023388 ( 32 B )
DEBUG:   freed nil from 0x600023388 to 0x600023398 ( 16 B )
DEBUG:   freed [a Const] ( ( lambda ( ( a ( b nil ) ) ( ( if ( a ( b ( #f nil ) ) ) ) nil ) ) ) nil ) from 0x600023398 to 0x6000233b8 ( 32 B )
DEBUG:   freed [a Const] ( and ( ( lambda ( ( a ( b nil ) ) ( ( if ( a ( b ( #f nil ) ) ) ) nil ) ) ) nil ) ) from 0x6000233b8 to 0x6000233d8 ( 32 B )
DEBUG:   freed [a Const] ( define ( and ( ( lambda ( ( a ( b nil ) ) ( ( if ( a ( b ( #f nil ) ) ) ) nil ) ) ) nil ) ) ) from 0x6000233d8 to 0x6000233f8 ( 32 B )
DEBUG:   freed [an Object]  from 0x600023418 to 0x600023428 ( 16 B )
DEBUG:   freed [a Symbol] define from 0x600023428 to 0x600023440 ( 24 B )
DEBUG:   freed [a Symbol] or from 0x600023440 to 0x600023458 ( 24 B )
DEBUG:   freed [a Symbol] lambda from 0x600023458 to 0x600023470 ( 24 B )
DEBUG:   freed nil from 0x6000235d8 to 0x6000235e8 ( 16 B )
DEBUG:   freed [a Const] ( ( if ( a ( #t ( b nil ) ) ) ) nil ) from 0x6000235e8 to 0x600023608 ( 32 B )
DEBUG:   freed [a Const] ( ( a ( b nil ) ) ( ( if ( a ( #t ( b nil ) ) ) ) nil ) ) from 0x600023608 to 0x600023628 ( 32 B )
DEBUG:   freed [a Const] ( lambda ( ( a ( b nil ) ) ( ( if ( a ( #t ( b nil ) ) ) ) nil ) ) ) from 0x600023628 to 0x600023648 ( 32 B )
DEBUG:   freed nil from 0x600023648 to 0x600023658 ( 16 B )
DEBUG:   freed [a Const] ( ( lambda ( ( a ( b nil ) ) ( ( if ( a ( #t ( b nil ) ) ) ) nil ) ) ) nil ) from 0x600023658 to 0x600023678 ( 32 B )
DEBUG:   freed [a Const] ( or ( ( lambda ( ( a ( b nil ) ) ( ( if ( a ( #t ( b nil ) ) ) ) nil ) ) ) nil ) ) from 0x600023678 to 0x600023698 ( 32 B )
DEBUG:   freed [a Const] ( define ( or ( ( lambda ( ( a ( b nil ) ) ( ( if ( a ( #t ( b nil ) ) ) ) nil ) ) ) nil ) ) ) from 0x600023698 to 0x6000236b8 ( 32 B )
DEBUG:   freed [an Object]  from 0x6000236d8 to 0x6000236e8 ( 16 B )
DEBUG:   freed [a Symbol] define from 0x6000236e8 to 0x600023700 ( 24 B )
DEBUG:   freed [a Symbol] square from 0x600023700 to 0x600023718 ( 24 B )
DEBUG:   freed [a Symbol] lambda from 0x600023718 to 0x600023730 ( 24 B )
DEBUG:   empty space from 0x6000237d0 to 0x6000237e8 ( 24 B )
DEBUG:   freed [a Symbol] if from 0x6000237e8 to 0x600023800 ( 24 B )
DEBUG:   freed [a Symbol] < from 0x600023800 to 0x600023818 ( 24 B )
DEBUG:   freed [an Integer] 2 from 0x600023818 to 0x600023830 ( 24 B )
DEBUG:   freed [an Integer] 3 from 0x600023830 to 0x600023848 ( 24 B )
DEBUG:   empty space from 0x600023848 to 0x600023850 ( 8 B )
DEBUG:   freed nil from 0x60006da20 to 0x60006da30 ( 16 B )
DEBUG:   freed [a Const] ( ( * ( n ( n nil ) ) ) nil ) from 0x60006da30 to 0x60006da50 ( 32 B )
DEBUG:   freed [a Const] ( ( n nil ) ( ( * ( n ( n nil ) ) ) nil ) ) from 0x60006da50 to 0x60006da70 ( 32 B )
DEBUG:   freed [a Const] ( lambda ( ( n nil ) ( ( * ( n ( n nil ) ) ) nil ) ) ) from 0x60006da70 to 0x60006da90 ( 32 B )
DEBUG:   freed nil from 0x60006da90 to 0x60006daa0 ( 16 B )
DEBUG:   freed [a Const] ( ( lambda ( ( n nil ) ( ( * ( n ( n nil ) ) ) nil ) ) ) nil ) from 0x60006daa0 to 0x60006dac0 ( 32 B )
DEBUG:   freed [a Const] ( square ( ( lambda ( ( n nil ) ( ( * ( n ( n nil ) ) ) nil ) ) ) nil ) ) from 0x60006dac0 to 0x60006dae0 ( 32 B )
DEBUG:   freed [a Const] ( define ( square ( ( lambda ( ( n nil ) ( ( * ( n ( n nil ) ) ) nil ) ) ) nil ) ) ) from 0x60006dae0 to 0x60006db00 ( 32 B )
DEBUG:   freed [an Object]  from 0x60006db20 to 0x60006db30 ( 16 B )
DEBUG:   freed [a Symbol] define from 0x60006db30 to 0x60006db48 ( 24 B )
DEBUG:   freed [a Symbol] fac from 0x60006db48 to 0x60006db60 ( 24 B )
DEBUG:   freed [a Symbol] lambda from 0x60006db60 to 0x60006db78 ( 24 B )
DEBUG:   freed nil from 0x60006def8 to 0x60006df08 ( 16 B )
DEBUG:   freed [a Const] ( ( if ( ( = ( n ( 1 nil ) ) ) ( 1 ( ( * ( n ( ( fac ( ( - ( n ( 1 nil ) ) ) nil ) ) nil ) ) ) nil ) ) ) ) nil ) from 0x60006df08 to 0x60006df28 ( 32 B )
DEBUG:   freed [a Const] ( ( n nil ) ( ( if ( ( = ( n ( 1 nil ) ) ) ( 1 ( ( * ( n ( ( fac ( ( - ( n ( 1 nil ) ) ) nil ) ) nil ) ) ) nil ) ) ) ) nil ) ) from 0x60006df28 to 0x60006df48 ( 32 B )
DEBUG:   freed [a Const] ( lambda ( ( n nil ) ( ( if ( ( = ( n ( 1 nil ) ) ) ( 1 ( ( * ( n ( ( fac ( ( - ( n ( 1 nil ) ) ) nil ) ) nil ) ) ) nil ) ) ) ) nil ) ) ) from 0x60006df48 to 0x60006df68 ( 32 B )
DEBUG:   freed nil from 0x60006df68 to 0x60006df78 ( 16 B )
DEBUG:   freed [a Const] ( ( lambda ( ( n nil ) ( ( if ( ( = ( n ( 1 nil ) ) ) ( 1 ( ( * ( n ( ( fac ( ( - ( n ( 1 nil ) ) ) nil ) ) nil ) ) ) nil ) ) ) ) nil ) ) ) nil ) from 0x60006df78 to 0x60006df98 ( 32 B )
DEBUG:   freed [a Const] ( fac ( ( lambda ( ( n nil ) ( ( if ( ( = ( n ( 1 nil ) ) ) ( 1 ( ( * ( n ( ( fac ( ( - ( n ( 1 nil ) ) ) nil ) ) nil ) ) ) nil ) ) ) ) nil ) ) ) nil ) ) from 0x60006df98 to 0x60006dfb8 ( 32 B )
DEBUG:   freed [a Const] ( define ( fac ( ( lambda ( ( n nil ) ( ( if ( ( = ( n ( 1 nil ) ) ) ( 1 ( ( * ( n ( ( fac ( ( - ( n ( 1 nil ) ) ) nil ) ) nil ) ) ) nil ) ) ) ) nil ) ) ) nil ) ) ) from 0x60006dfb8 to 0x60006dfd8 ( 32 B )
DEBUG:   freed [an Object]  from 0x60006dff8 to 0x60006e008 ( 16 B )
DEBUG:   freed [a Symbol] define from 0x60006e008 to 0x60006e020 ( 24 B )
DEBUG:   freed [a Symbol] a from 0x60006e020 to 0x60006e038 ( 24 B )
DEBUG:   freed nil from 0x60006e050 to 0x60006e060 ( 16 B )
DEBUG:   freed [a Const] ( 10 nil ) from 0x60006e060 to 0x60006e080 ( 32 B )
DEBUG:   freed [a Const] ( a ( 10 nil ) ) from 0x60006e080 to 0x60006e0a0 ( 32 B )
DEBUG:   freed [a Const] ( define ( a ( 10 nil ) ) ) from 0x60006e0a0 to 0x60006e0c0 ( 32 B )
DEBUG:   freed [an Object]  from 0x60006e0c0 to 0x60006e0d0 ( 16 B )
DEBUG:   freed [a Symbol] define from 0x60006e0d0 to 0x60006e0e8 ( 24 B )
DEBUG:   freed [a Symbol] b from 0x60006e0e8 to 0x60006e100 ( 24 B )
DEBUG:   freed nil from 0x60006e118 to 0x60006e128 ( 16 B )
DEBUG:   freed [a Const] ( 20 nil ) from 0x60006e128 to 0x60006e148 ( 32 B )
DEBUG:   freed [a Const] ( b ( 20 nil ) ) from 0x60006e148 to 0x60006e168 ( 32 B )
DEBUG:   freed [a Const] ( define ( b ( 20 nil ) ) ) from 0x60006e168 to 0x60006e188 ( 32 B )
DEBUG:   freed [an Object]  from 0x60006e188 to 0x60006e198 ( 16 B )
DEBUG:   freed [a Symbol] not from 0x60006e198 to 0x60006e1b0 ( 24 B )
DEBUG:   freed [a Boolean] #t from 0x60006e1b0 to 0x60006e1c0 ( 16 B )
DEBUG:   freed nil from 0x60006e1c0 to 0x60006e1d0 ( 16 B )
DEBUG:   freed [a Const] ( #t nil ) from 0x60006e1d0 to 0x60006e1f0 ( 32 B )
DEBUG:   freed [a Const] ( not ( #t nil ) ) from 0x60006e1f0 to 0x60006e210 ( 32 B )
DEBUG:   freed [a Symbol] not from 0x60006e210 to 0x60006e228 ( 24 B )
DEBUG:   freed [a Symbol] = from 0x60006e228 to 0x60006e240 ( 24 B )
DEBUG:   freed [an Integer] 3 from 0x60006e240 to 0x60006e258 ( 24 B )
DEBUG:   freed [an Integer] 4 from 0x60006e258 to 0x60006e270 ( 24 B )
DEBUG:   freed nil from 0x60006e270 to 0x60006e280 ( 16 B )
DEBUG:   freed [a Const] ( 4 nil ) from 0x60006e280 to 0x60006e2a0 ( 32 B )
DEBUG:   freed [a Const] ( 3 ( 4 nil ) ) from 0x60006e2a0 to 0x60006e2c0 ( 32 B )
DEBUG:   freed [a Const] ( = ( 3 ( 4 nil ) ) ) from 0x60006e2c0 to 0x60006e2e0 ( 32 B )
DEBUG:   freed nil from 0x60006e2e0 to 0x60006e2f0 ( 16 B )
DEBUG:   freed [a Const] ( ( = ( 3 ( 4 nil ) ) ) nil ) from 0x60006e2f0 to 0x60006e310 ( 32 B )
DEBUG:   freed [a Const] ( not ( ( = ( 3 ( 4 nil ) ) ) nil ) ) from 0x60006e310 to 0x60006e330 ( 32 B )
DEBUG:   freed [a Boolean] #f from 0x60006e330 to 0x60006e340 ( 16 B )
DEBUG:   freed [a Symbol] and from 0x60006e340 to 0x60006e358 ( 24 B )
DEBUG:   freed [a Boolean] #t from 0x60006e358 to 0x60006e368 ( 16 B )
DEBUG:   freed [a Boolean] #t from 0x60006e368 to 0x60006e378 ( 16 B )
DEBUG:   freed nil from 0x60006e378 to 0x60006e388 ( 16 B )
DEBUG:   freed [a Const] ( #t nil ) from 0x60006e388 to 0x60006e3a8 ( 32 B )
DEBUG:   freed [a Const] ( #t ( #t nil ) ) from 0x60006e3a8 to 0x60006e3c8 ( 32 B )
DEBUG:   freed [a Const] ( and ( #t ( #t nil ) ) ) from 0x60006e3c8 to 0x60006e3e8 ( 32 B )
DEBUG:   freed [a Symbol] square from 0x60006e3e8 to 0x60006e400 ( 24 B )
DEBUG:   freed [a Symbol] a from 0x60006e400 to 0x60006e418 ( 24 B )
DEBUG:   freed nil from 0x60006e418 to 0x60006e428 ( 16 B )
DEBUG:   freed [a Const] ( a nil ) from 0x60006e428 to 0x60006e448 ( 32 B )
DEBUG:   freed [a Const] ( square ( a nil ) ) from 0x60006e448 to 0x60006e468 ( 32 B )
DEBUG:   freed [an Integer] 100 from 0x60006e468 to 0x60006e480 ( 24 B )
DEBUG:   freed [a Symbol] square from 0x60006e480 to 0x60006e498 ( 24 B )
DEBUG:   freed [a Symbol] * from 0x60006e498 to 0x60006e4b0 ( 24 B )
DEBUG:   freed [an Integer] 2 from 0x60006e4b0 to 0x60006e4c8 ( 24 B )
DEBUG:   freed [an Integer] 1 from 0x60006e4c8 to 0x60006e4e0 ( 24 B )
DEBUG:   freed nil from 0x60006e4e0 to 0x60006e4f0 ( 16 B )
DEBUG:   freed [a Const] ( 1 nil ) from 0x60006e4f0 to 0x60006e510 ( 32 B )
DEBUG:   freed [a Const] ( 2 ( 1 nil ) ) from 0x60006e510 to 0x60006e530 ( 32 B )
DEBUG:   freed [a Const] ( * ( 2 ( 1 nil ) ) ) from 0x60006e530 to 0x60006e550 ( 32 B )
DEBUG:   freed nil from 0x60006e550 to 0x60006e560 ( 16 B )
DEBUG:   freed [a Const] ( ( * ( 2 ( 1 nil ) ) ) nil ) from 0x60006e560 to 0x60006e580 ( 32 B )
DEBUG:   freed [a Const] ( square ( ( * ( 2 ( 1 nil ) ) ) nil ) ) from 0x60006e580 to 0x60006e5a0 ( 32 B )
DEBUG:   freed [an Integer] 2 from 0x60006e5a0 to 0x60006e5b8 ( 24 B )
DEBUG:   freed [an Integer] 4 from 0x60006e5b8 to 0x60006e5d0 ( 24 B )
DEBUG:   freed [a Symbol] fac from 0x60006e5d0 to 0x60006e5e8 ( 24 B )
DEBUG:   freed [an Integer] 4 from 0x60006e5e8 to 0x60006e600 ( 24 B )
DEBUG:   freed nil from 0x60006e600 to 0x60006e610 ( 16 B )
DEBUG:   freed [a Const] ( 4 nil ) from 0x60006e610 to 0x60006e630 ( 32 B )
DEBUG:   freed [a Const] ( fac ( 4 nil ) ) from 0x60006e630 to 0x60006e650 ( 32 B )
DEBUG:   freed [a Boolean] #f from 0x60006e650 to 0x60006e660 ( 16 B )
DEBUG:   freed [an Integer] 3 from 0x60006e660 to 0x60006e678 ( 24 B )
DEBUG:   freed [a Boolean] #f from 0x60006e678 to 0x60006e688 ( 16 B )
DEBUG:   freed [an Integer] 2 from 0x60006e688 to 0x60006e6a0 ( 24 B )
DEBUG:   freed [a Boolean] #f from 0x60006e6a0 to 0x60006e6b0 ( 16 B )
DEBUG:   freed [an Integer] 1 from 0x60006e6b0 to 0x60006e6c8 ( 24 B )
DEBUG:   freed [a Boolean] #t from 0x60006e6c8 to 0x60006e6d8 ( 16 B )
DEBUG:   freed [an Integer] 2 from 0x60006e6d8 to 0x60006e6f0 ( 24 B )
DEBUG:   freed [an Integer] 6 from 0x60006e6f0 to 0x60006e708 ( 24 B )
DEBUG:   freed [an Integer] 24 from 0x60006e708 to 0x60006e720 ( 24 B )
DEBUG:   freed [a Symbol] define from 0x60006e720 to 0x60006e738 ( 24 B )
DEBUG:   freed [a Symbol] cadr from 0x60006e738 to 0x60006e750 ( 24 B )
DEBUG:   freed [a Symbol] lambda from 0x60006e750 to 0x60006e768 ( 24 B )
DEBUG:   freed nil from 0x60006e898 to 0x60006e8a8 ( 16 B )
DEBUG:   freed [a Const] ( ( car ( ( cdr ( l nil ) ) nil ) ) nil ) from 0x60006e8a8 to 0x60006e8c8 ( 32 B )
DEBUG:   freed [a Const] ( ( l nil ) ( ( car ( ( cdr ( l nil ) ) nil ) ) nil ) ) from 0x60006e8c8 to 0x60006e8e8 ( 32 B )
DEBUG:   freed [a Const] ( lambda ( ( l nil ) ( ( car ( ( cdr ( l nil ) ) nil ) ) nil ) ) ) from 0x60006e8e8 to 0x60006e908 ( 32 B )
DEBUG:   freed nil from 0x60006e908 to 0x60006e918 ( 16 B )
DEBUG:   freed [a Const] ( ( lambda ( ( l nil ) ( ( car ( ( cdr ( l nil ) ) nil ) ) nil ) ) ) nil ) from 0x60006e918 to 0x60006e938 ( 32 B )
DEBUG:   freed [a Const] ( cadr ( ( lambda ( ( l nil ) ( ( car ( ( cdr ( l nil ) ) nil ) ) nil ) ) ) nil ) ) from 0x60006e938 to 0x60006e958 ( 32 B )
DEBUG:   freed [a Const] ( define ( cadr ( ( lambda ( ( l nil ) ( ( car ( ( cdr ( l nil ) ) nil ) ) nil ) ) ) nil ) ) ) from 0x60006e958 to 0x60006e978 ( 32 B )
DEBUG:   freed [an Object]  from 0x60006e998 to 0x60006e9a8 ( 16 B )
DEBUG: garbage collected - mode set to pick free spaces - freed enough memory
DEBUG: allocated [a Symbol] caddr from 0x600022958 to 0x600022970 ( 24 B )
DEBUG: allocated [a Symbol] lambda from 0x600022970 to 0x600022988 ( 24 B )
DEBUG: allocated [a Symbol] l from 0x600022988 to 0x6000229a0 ( 24 B )
DEBUG: allocated nil from 0x6000229a0 to 0x6000229b0 ( 16 B )
DEBUG: allocated [a Const] ( l nil ) from 0x6000229b0 to 0x6000229d0 ( 32 B )
DEBUG: allocated [a Symbol] car from 0x6000229d0 to 0x6000229e8 ( 24 B )
DEBUG: allocated [a Symbol] cdr from 0x6000229e8 to 0x600022a00 ( 24 B )
DEBUG: allocated [a Symbol] cdr from 0x600022a00 to 0x600022a18 ( 24 B )
DEBUG: allocated [a Symbol] l from 0x600022a18 to 0x600022a30 ( 24 B )
DEBUG: allocated nil from 0x600022a30 to 0x600022a40 ( 16 B )
DEBUG: allocated [a Const] ( l nil ) from 0x600022a40 to 0x600022a60 ( 32 B )
DEBUG: allocated [a Const] ( cdr ( l nil ) ) from 0x600022a60 to 0x600022a80 ( 32 B )
DEBUG: allocated nil from 0x600022a80 to 0x600022a90 ( 16 B )
DEBUG: allocated [a Const] ( ( cdr ( l nil ) ) nil ) from 0x600022a90 to 0x600022ab0 ( 32 B )
DEBUG: allocated [a Const] ( cdr ( ( cdr ( l nil ) ) nil ) ) from 0x600022ab0 to 0x600022ad0 ( 32 B )
DEBUG: allocated nil from 0x600022ad0 to 0x600022ae0 ( 16 B )
DEBUG: allocated [a Const] ( ( cdr ( ( cdr ( l nil ) ) nil ) ) nil ) from 0x600022ae0 to 0x600022b00 ( 32 B )
DEBUG: allocated [a Const] ( car ( ( cdr ( ( cdr ( l nil ) ) nil ) ) nil ) ) from 0x600022b00 to 0x600022b20 ( 32 B )
DEBUG: allocated nil from 0x600022b20 to 0x600022b30 ( 16 B )
DEBUG: allocated [a Const] ( ( car ( ( cdr ( ( cdr ( l nil ) ) nil ) ) nil ) ) nil ) from 0x600022b30 to 0x600022b50 ( 32 B )
DEBUG: allocated [a Const] ( ( l nil ) ( ( car ( ( cdr ( ( cdr ( l nil ) ) nil ) ) nil ) ) nil ) ) from 0x600022b50 to 0x600022b70 ( 32 B )
DEBUG: allocated [a Const] ( lambda ( ( l nil ) ( ( car ( ( cdr ( ( cdr ( l nil ) ) nil ) ) nil ) ) nil ) ) ) from 0x600022b70 to 0x600022b90 ( 32 B )
DEBUG: allocated nil from 0x600022b90 to 0x600022ba0 ( 16 B )
DEBUG: allocated [a Const] ( ( lambda ( ( l nil ) ( ( car ( ( cdr ( ( cdr ( l nil ) ) nil ) ) nil ) ) nil ) ) ) nil ) from 0x600022ba0 to 0x600022bc0 ( 32 B )
DEBUG: allocated [a Const] ( caddr ( ( lambda ( ( l nil ) ( ( car ( ( cdr ( ( cdr ( l nil ) ) nil ) ) nil ) ) nil ) ) ) nil ) ) from 0x600022bc0 to 0x600022be0 ( 32 B )
DEBUG: allocated [a Const] ( define ( caddr ( ( lambda ( ( l nil ) ( ( car ( ( cdr ( ( cdr ( l nil ) ) nil ) ) nil ) ) nil ) ) ) nil ) ) ) from 0x600022be0 to 0x600022c00 ( 32 B )
DEBUG: allocated [a Void (scary, right?)] from 0x600022c00 to 0x600022c20 ( 32 B )
DEBUG: allocated [an Object]  from 0x600022c20 to 0x600022c30 ( 16 B )

> DEBUG: allocated [a Symbol] define from 0x600022c30 to 0x600022c48 ( 24 B )
DEBUG: allocated [a Symbol] first from 0x600022c48 to 0x600022c60 ( 24 B )
DEBUG: allocated [a Symbol] car from 0x600022c60 to 0x600022c78 ( 24 B )
DEBUG: allocated nil from 0x600022c78 to 0x600022c88 ( 16 B )
DEBUG: allocated [a Const] ( car nil ) from 0x600022c88 to 0x600022ca8 ( 32 B )
DEBUG: allocated [a Const] ( first ( car nil ) ) from 0x600022ca8 to 0x600022cc8 ( 32 B )
DEBUG: allocated [a Const] ( define ( first ( car nil ) ) ) from 0x600022cc8 to 0x600022ce8 ( 32 B )
DEBUG: allocated [an Object]  from 0x600022ce8 to 0x600022cf8 ( 16 B )

> DEBUG: allocated [a Symbol] define from 0x600022cf8 to 0x600022d10 ( 24 B )
DEBUG: allocated [a Symbol] second from 0x600022d10 to 0x600022d28 ( 24 B )
DEBUG: allocated [a Symbol] cadr from 0x600022d28 to 0x600022d40 ( 24 B )
DEBUG: allocated nil from 0x600022d40 to 0x600022d50 ( 16 B )
DEBUG: allocated [a Const] ( cadr nil ) from 0x600022d50 to 0x600022d70 ( 32 B )
DEBUG: allocated [a Const] ( second ( cadr nil ) ) from 0x600022d70 to 0x600022d90 ( 32 B )
DEBUG: allocated [a Const] ( define ( second ( cadr nil ) ) ) from 0x600022d90 to 0x600022db0 ( 32 B )
DEBUG: allocated [an Object]  from 0x600022db0 to 0x600022dc0 ( 16 B )

> DEBUG: allocated [a Symbol] define from 0x600022dc0 to 0x600022dd8 ( 24 B )
DEBUG: allocated [a Symbol] third from 0x600022dd8 to 0x600022df0 ( 24 B )
DEBUG: allocated [a Symbol] caddr from 0x600022df0 to 0x600022e08 ( 24 B )
DEBUG: allocated nil from 0x600022e08 to 0x600022e18 ( 16 B )
DEBUG: allocated [a Const] ( caddr nil ) from 0x600022e18 to 0x600022e38 ( 32 B )
DEBUG: allocated [a Const] ( third ( caddr nil ) ) from 0x600022e38 to 0x600022e58 ( 32 B )
DEBUG: allocated [a Const] ( define ( third ( caddr nil ) ) ) from 0x600022e58 to 0x600022e78 ( 32 B )
DEBUG: allocated [an Object]  from 0x600022e78 to 0x600022e88 ( 16 B )

> DEBUG: allocated [a Symbol] first from 0x600022e88 to 0x600022ea0 ( 24 B )
DEBUG: allocated [an Integer] 1 from 0x600022ea0 to 0x600022eb8 ( 24 B )
DEBUG: allocated [an Integer] 2 from 0x600022eb8 to 0x600022ed0 ( 24 B )
DEBUG: allocated [an Integer] 3 from 0x600022ed0 to 0x600022ee8 ( 24 B )
DEBUG: allocated nil from 0x600022ee8 to 0x600022ef8 ( 16 B )
DEBUG: allocated [a Const] ( 3 nil ) from 0x600022ef8 to 0x600022f18 ( 32 B )
DEBUG: allocated [a Const] ( 2 ( 3 nil ) ) from 0x600023058 to 0x600023078 ( 32 B )
DEBUG: allocated [a Const] ( 1 ( 2 ( 3 nil ) ) ) from 0x600023078 to 0x600023098 ( 32 B )
DEBUG: allocated nil from 0x600022f18 to 0x600022f28 ( 16 B )
DEBUG: allocated [a Const] ( ( 1 ( 2 ( 3 nil ) ) ) nil ) from 0x600023098 to 0x6000230b8 ( 32 B )
DEBUG: allocated [a Const] ( first ( ( 1 ( 2 ( 3 nil ) ) ) nil ) ) from 0x6000230b8 to 0x6000230d8 ( 32 B )
1
> DEBUG: allocated [a Symbol] second from 0x6000230d8 to 0x6000230f0 ( 24 B )
DEBUG: allocated [an Integer] 1 from 0x6000230f0 to 0x600023108 ( 24 B )
DEBUG: allocated [an Integer] 2 from 0x600023108 to 0x600023120 ( 24 B )
DEBUG: allocated [an Integer] 3 from 0x600023120 to 0x600023138 ( 24 B )
DEBUG: allocated nil from 0x600023158 to 0x600023168 ( 16 B )
DEBUG: allocated [a Const] ( 3 nil ) from 0x600023168 to 0x600023188 ( 32 B )
DEBUG: allocated [a Const] ( 2 ( 3 nil ) ) from 0x600023188 to 0x6000231a8 ( 32 B )
DEBUG: allocated [a Const] ( 1 ( 2 ( 3 nil ) ) ) from 0x600023318 to 0x600023338 ( 32 B )
DEBUG: allocated nil from 0x600023338 to 0x600023348 ( 16 B )
DEBUG: allocated [a Const] ( ( 1 ( 2 ( 3 nil ) ) ) nil ) from 0x600023348 to 0x600023368 ( 32 B )
DEBUG: allocated [a Const] ( second ( ( 1 ( 2 ( 3 nil ) ) ) nil ) ) from 0x600023368 to 0x600023388 ( 32 B )
2
> DEBUG: allocated [a Symbol] third from 0x600023388 to 0x6000233a0 ( 24 B )
DEBUG: allocated [an Integer] 1 from 0x6000233a0 to 0x6000233b8 ( 24 B )
DEBUG: allocated [an Integer] 2 from 0x6000233b8 to 0x6000233d0 ( 24 B )
DEBUG: allocated [an Integer] 3 from 0x6000233d0 to 0x6000233e8 ( 24 B )
DEBUG: allocated nil from 0x6000233e8 to 0x6000233f8 ( 16 B )
DEBUG: allocated [a Const] ( 3 nil ) from 0x600023418 to 0x600023438 ( 32 B )
DEBUG: allocated [a Const] ( 2 ( 3 nil ) ) from 0x600023438 to 0x600023458 ( 32 B )
DEBUG: allocated [a Const] ( 1 ( 2 ( 3 nil ) ) ) from 0x6000235d8 to 0x6000235f8 ( 32 B )
DEBUG: allocated nil from 0x600023458 to 0x600023468 ( 16 B )
DEBUG: allocated [a Const] ( ( 1 ( 2 ( 3 nil ) ) ) nil ) from 0x6000235f8 to 0x600023618 ( 32 B )
DEBUG: allocated [a Const] ( third ( ( 1 ( 2 ( 3 nil ) ) ) nil ) ) from 0x600023618 to 0x600023638 ( 32 B )
3
> DEBUG: allocated [a Symbol] define from 0x600023638 to 0x600023650 ( 24 B )
DEBUG: allocated [a Symbol] fibonacci from 0x600023650 to 0x600023668 ( 24 B )
DEBUG: allocated [a Symbol] lambda from 0x600023668 to 0x600023680 ( 24 B )
DEBUG: allocated [a Symbol] n from 0x600023680 to 0x600023698 ( 24 B )
DEBUG: allocated nil from 0x600023698 to 0x6000236a8 ( 16 B )
DEBUG: allocated [a Const] ( n nil ) from 0x6000236d8 to 0x6000236f8 ( 32 B )
DEBUG: allocated [a Symbol] if from 0x6000236f8 to 0x600023710 ( 24 B )
DEBUG: allocated [a Symbol] < from 0x600023710 to 0x600023728 ( 24 B )
DEBUG: allocated [a Symbol] n from 0x6000237d0 to 0x6000237e8 ( 24 B )
DEBUG: allocated [an Integer] 2 from 0x6000237e8 to 0x600023800 ( 24 B )
DEBUG: allocated nil from 0x6000236a8 to 0x6000236b8 ( 16 B )
DEBUG: allocated [a Const] ( 2 nil ) from 0x600023800 to 0x600023820 ( 32 B )
DEBUG: allocated [a Const] ( n ( 2 nil ) ) from 0x600023820 to 0x600023840 ( 32 B )
DEBUG: allocated [a Const] ( < ( n ( 2 nil ) ) ) from 0x60006da20 to 0x60006da40 ( 32 B )
DEBUG: allocated [a Symbol] n from 0x60006da40 to 0x60006da58 ( 24 B )
DEBUG: allocated [a Symbol] + from 0x60006da58 to 0x60006da70 ( 24 B )
DEBUG: allocated [a Symbol] fibonacci from 0x60006da70 to 0x60006da88 ( 24 B )
DEBUG: allocated [a Symbol] - from 0x60006da88 to 0x60006daa0 ( 24 B )
DEBUG: allocated [a Symbol] n from 0x60006daa0 to 0x60006dab8 ( 24 B )
DEBUG: allocated [an Integer] 1 from 0x60006dab8 to 0x60006dad0 ( 24 B )
DEBUG: allocated nil from 0x600023840 to 0x600023850 ( 16 B )
DEBUG: allocated [a Const] ( 1 nil ) from 0x60006dad0 to 0x60006daf0 ( 32 B )
DEBUG: allocated [a Const] ( n ( 1 nil ) ) from 0x60006db20 to 0x60006db40 ( 32 B )
DEBUG: allocated [a Const] ( - ( n ( 1 nil ) ) ) from 0x60006db40 to 0x60006db60 ( 32 B )
DEBUG: allocated nil from 0x60006daf0 to 0x60006db00 ( 16 B )
DEBUG: allocated [a Const] ( ( - ( n ( 1 nil ) ) ) nil ) from 0x60006def8 to 0x60006df18 ( 32 B )
DEBUG: allocated [a Const] ( fibonacci ( ( - ( n ( 1 nil ) ) ) nil ) ) from 0x60006df18 to 0x60006df38 ( 32 B )
DEBUG: allocated [a Symbol] fibonacci from 0x60006db60 to 0x60006db78 ( 24 B )
DEBUG: allocated [a Symbol] - from 0x60006df38 to 0x60006df50 ( 24 B )
DEBUG: allocated [a Symbol] n from 0x60006df50 to 0x60006df68 ( 24 B )
DEBUG: allocated [an Integer] 2 from 0x60006df68 to 0x60006df80 ( 24 B )
DEBUG: allocated nil from 0x60006df80 to 0x60006df90 ( 16 B )
DEBUG: allocated [a Const] ( 2 nil ) from 0x60006df90 to 0x60006dfb0 ( 32 B )
DEBUG: allocated [a Const] ( n ( 2 nil ) ) from 0x60006dfb0 to 0x60006dfd0 ( 32 B )
DEBUG: allocated [a Const] ( - ( n ( 2 nil ) ) ) from 0x60006dff8 to 0x60006e018 ( 32 B )
DEBUG: allocated nil from 0x60006e018 to 0x60006e028 ( 16 B )
DEBUG: allocated [a Const] ( ( - ( n ( 2 nil ) ) ) nil ) from 0x60006e050 to 0x60006e070 ( 32 B )
DEBUG: allocated [a Const] ( fibonacci ( ( - ( n ( 2 nil ) ) ) nil ) ) from 0x60006e070 to 0x60006e090 ( 32 B )
DEBUG: allocated nil from 0x60006e028 to 0x60006e038 ( 16 B )
DEBUG: allocated [a Const] ( ( fibonacci ( ( - ( n ( 2 nil ) ) ) nil ) ) nil ) from 0x60006e090 to 0x60006e0b0 ( 32 B )
DEBUG: allocated [a Const] ( ( fibonacci ( ( - ( n ( 1 nil ) ) ) nil ) ) ( ( fibonacci ( ( - ( n ( 2 nil ) ) ) nil ) ) nil ) ) from 0x60006e0b0 to 0x60006e0d0 ( 32 B )
DEBUG: allocated [a Const] ( + ( ( fibonacci ( ( - ( n ( 1 nil ) ) ) nil ) ) ( ( fibonacci ( ( - ( n ( 2 nil ) ) ) nil ) ) nil ) ) ) from 0x60006e0d0 to 0x60006e0f0 ( 32 B )
DEBUG: allocated nil from 0x60006e0f0 to 0x60006e100 ( 16 B )
DEBUG: allocated [a Const] ( ( + ( ( fibonacci ( ( - ( n ( 1 nil ) ) ) nil ) ) ( ( fibonacci ( ( - ( n ( 2 nil ) ) ) nil ) ) nil ) ) ) nil ) from 0x60006e118 to 0x60006e138 ( 32 B )
DEBUG: allocated [a Const] ( n ( ( + ( ( fibonacci ( ( - ( n ( 1 nil ) ) ) nil ) ) ( ( fibonacci ( ( - ( n ( 2 nil ) ) ) nil ) ) nil ) ) ) nil ) ) from 0x60006e138 to 0x60006e158 ( 32 B )
DEBUG: allocated [a Const] ( ( < ( n ( 2 nil ) ) ) ( n ( ( + ( ( fibonacci ( ( - ( n ( 1 nil ) ) ) nil ) ) ( ( fibonacci ( ( - ( n ( 2 nil ) ) ) nil ) ) nil ) ) ) nil ) ) ) from 0x60006e158 to 0x60006e178 ( 32 B )
DEBUG: allocated [a Const] ( if ( ( < ( n ( 2 nil ) ) ) ( n ( ( + ( ( fibonacci ( ( - ( n ( 1 nil ) ) ) nil ) ) ( ( fibonacci ( ( - ( n ( 2 nil ) ) ) nil ) ) nil ) ) ) nil ) ) ) ) from 0x60006e178 to 0x60006e198 ( 32 B )
DEBUG: allocated nil from 0x60006e198 to 0x60006e1a8 ( 16 B )
DEBUG: allocated [a Const] ( ( if ( ( < ( n ( 2 nil ) ) ) ( n ( ( + ( ( fibonacci ( ( - ( n ( 1 nil ) ) ) nil ) ) ( ( fibonacci ( ( - ( n ( 2 nil ) ) ) nil ) ) nil ) ) ) nil ) ) ) ) nil ) from 0x60006e1a8 to 0x60006e1c8 ( 32 B )
DEBUG: allocated [a Const] ( ( n nil ) ( ( if ( ( < ( n ( 2 nil ) ) ) ( n ( ( + ( ( fibonacci ( ( - ( n ( 1 nil ) ) ) nil ) ) ( ( fibonacci ( ( - ( n ( 2 nil ) ) ) nil ) ) nil ) ) ) nil ) ) ) ) nil ) ) from 0x60006e1c8 to 0x60006e1e8 ( 32 B )
DEBUG: allocated [a Const] ( lambda ( ( n nil ) ( ( if ( ( < ( n ( 2 nil ) ) ) ( n ( ( + ( ( fibonacci ( ( - ( n ( 1 nil ) ) ) nil ) ) ( ( fibonacci ( ( - ( n ( 2 nil ) ) ) nil ) ) nil ) ) ) nil ) ) ) ) nil ) ) ) from 0x60006e1e8 to 0x60006e208 ( 32 B )
DEBUG: allocated nil from 0x60006e208 to 0x60006e218 ( 16 B )
DEBUG: allocated [a Const] ( ( lambda ( ( n nil ) ( ( if ( ( < ( n ( 2 nil ) ) ) ( n ( ( + ( ( fibonacci ( ( - ( n ( 1 nil ) ) ) nil ) ) ( ( fibonacci ( ( - ( n ( 2 nil ) ) ) nil ) ) nil ) ) ) nil ) ) ) ) nil ) ) ) nil ) from 0x60006e218 to 0x60006e238 ( 32 B )
DEBUG: allocated [a Const] ( fibonacci ( ( lambda ( ( n nil ) ( ( if ( ( < ( n ( 2 nil ) ) ) ( n ( ( + ( ( fibonacci ( ( - ( n ( 1 nil ) ) ) nil ) ) ( ( fibonacci ( ( - ( n ( 2 nil ) ) ) nil ) ) nil ) ) ) nil ) ) ) ) nil ) ) ) nil ) ) from 0x60006e238 to 0x60006e258 ( 32 B )
DEBUG: allocated [a Const] ( define ( fibonacci ( ( lambda ( ( n nil ) ( ( if ( ( < ( n ( 2 nil ) ) ) ( n ( ( + ( ( fibonacci ( ( - ( n ( 1 nil ) ) ) nil ) ) ( ( fibonacci ( ( - ( n ( 2 nil ) ) ) nil ) ) nil ) ) ) nil ) ) ) ) nil ) ) ) nil ) ) ) from 0x60006e258 to 0x60006e278 ( 32 B )
DEBUG: allocated [a Void (scary, right?)] from 0x60006e278 to 0x60006e298 ( 32 B )
DEBUG: allocated [an Object]  from 0x60006e298 to 0x60006e2a8 ( 16 B )

> DEBUG: allocated [a Symbol] fibonacci from 0x60006e2a8 to 0x60006e2c0 ( 24 B )
DEBUG: allocated [an Integer] 1 from 0x60006e2c0 to 0x60006e2d8 ( 24 B )
DEBUG: allocated nil from 0x60006e2d8 to 0x60006e2e8 ( 16 B )
DEBUG: allocated [a Const] ( 1 nil ) from 0x60006e2e8 to 0x60006e308 ( 32 B )
DEBUG: allocated [a Const] ( fibonacci ( 1 nil ) ) from 0x60006e308 to 0x60006e328 ( 32 B )
DEBUG: allocated [a Boolean] #t from 0x60006e328 to 0x60006e338 ( 16 B )
1
> DEBUG: allocated [a Symbol] fibonacci from 0x60006e338 to 0x60006e350 ( 24 B )
DEBUG: allocated [an Integer] 2 from 0x60006e350 to 0x60006e368 ( 24 B )
DEBUG: allocated nil from 0x60006e368 to 0x60006e378 ( 16 B )
DEBUG: allocated [a Const] ( 2 nil ) from 0x60006e378 to 0x60006e398 ( 32 B )
DEBUG: allocated [a Const] ( fibonacci ( 2 nil ) ) from 0x60006e398 to 0x60006e3b8 ( 32 B )
DEBUG: allocated [a Boolean] #f from 0x60006e3b8 to 0x60006e3c8 ( 16 B )
DEBUG: allocated [an Integer] 1 from 0x60006e3c8 to 0x60006e3e0 ( 24 B )
DEBUG: allocated [a Boolean] #t from 0x60006e3e0 to 0x60006e3f0 ( 16 B )
DEBUG: allocated [an Integer] 0 from 0x60006e3f0 to 0x60006e408 ( 24 B )
DEBUG: allocated [a Boolean] #t from 0x60006e408 to 0x60006e418 ( 16 B )
DEBUG: allocated [an Integer] 1 from 0x60006e418 to 0x60006e430 ( 24 B )
1
> DEBUG: allocated [a Symbol] fibonacci from 0x60006e430 to 0x60006e448 ( 24 B )
DEBUG: allocated [an Integer] 3 from 0x60006e448 to 0x60006e460 ( 24 B )
DEBUG: allocated nil from 0x60006e460 to 0x60006e470 ( 16 B )
DEBUG: allocated [a Const] ( 3 nil ) from 0x60006e470 to 0x60006e490 ( 32 B )
DEBUG: allocated [a Const] ( fibonacci ( 3 nil ) ) from 0x60006e490 to 0x60006e4b0 ( 32 B )
DEBUG: allocated [a Boolean] #f from 0x60006e4b0 to 0x60006e4c0 ( 16 B )
DEBUG: allocated [an Integer] 2 from 0x60006e4c0 to 0x60006e4d8 ( 24 B )
DEBUG: allocated [a Boolean] #f from 0x60006e4d8 to 0x60006e4e8 ( 16 B )
DEBUG: allocated [an Integer] 1 from 0x60006e4e8 to 0x60006e500 ( 24 B )
DEBUG: allocated [a Boolean] #t from 0x60006e500 to 0x60006e510 ( 16 B )
DEBUG: allocated [an Integer] 0 from 0x60006e510 to 0x60006e528 ( 24 B )
DEBUG: allocated [a Boolean] #t from 0x60006e528 to 0x60006e538 ( 16 B )
DEBUG: allocated [an Integer] 1 from 0x60006e538 to 0x60006e550 ( 24 B )
DEBUG: allocated [an Integer] 1 from 0x60006e550 to 0x60006e568 ( 24 B )
DEBUG: allocated [a Boolean] #t from 0x60006e568 to 0x60006e578 ( 16 B )
DEBUG: allocated [an Integer] 2 from 0x60006e578 to 0x60006e590 ( 24 B )
2
> DEBUG: allocated [a Symbol] fibonacci from 0x60006e590 to 0x60006e5a8 ( 24 B )
DEBUG: allocated [an Integer] 4 from 0x60006e5a8 to 0x60006e5c0 ( 24 B )
DEBUG: allocated nil from 0x60006e5c0 to 0x60006e5d0 ( 16 B )
DEBUG: allocated [a Const] ( 4 nil ) from 0x60006e5d0 to 0x60006e5f0 ( 32 B )
DEBUG: allocated [a Const] ( fibonacci ( 4 nil ) ) from 0x60006e5f0 to 0x60006e610 ( 32 B )
DEBUG: allocated [a Boolean] #f from 0x60006e610 to 0x60006e620 ( 16 B )
DEBUG: allocated [an Integer] 3 from 0x60006e620 to 0x60006e638 ( 24 B )
DEBUG: allocated [a Boolean] #f from 0x60006e638 to 0x60006e648 ( 16 B )
DEBUG: allocated [an Integer] 2 from 0x60006e648 to 0x60006e660 ( 24 B )
DEBUG: allocated [a Boolean] #f from 0x60006e660 to 0x60006e670 ( 16 B )
DEBUG: allocated [an Integer] 1 from 0x60006e670 to 0x60006e688 ( 24 B )
DEBUG: allocated [a Boolean] #t from 0x60006e688 to 0x60006e698 ( 16 B )
DEBUG: allocated [an Integer] 0 from 0x60006e698 to 0x60006e6b0 ( 24 B )
DEBUG: allocated [a Boolean] #t from 0x60006e6b0 to 0x60006e6c0 ( 16 B )
DEBUG: allocated [an Integer] 1 from 0x60006e6c0 to 0x60006e6d8 ( 24 B )
DEBUG: allocated [an Integer] 1 from 0x60006e6d8 to 0x60006e6f0 ( 24 B )
DEBUG: allocated [a Boolean] #t from 0x60006e6f0 to 0x60006e700 ( 16 B )
DEBUG: allocated [an Integer] 2 from 0x60006e700 to 0x60006e718 ( 24 B )
DEBUG: allocated [an Integer] 2 from 0x60006e718 to 0x60006e730 ( 24 B )
DEBUG: allocated [a Boolean] #f from 0x60006e730 to 0x60006e740 ( 16 B )
DEBUG: allocated [an Integer] 1 from 0x60006e740 to 0x60006e758 ( 24 B )
DEBUG: allocated [a Boolean] #t from 0x60006e758 to 0x60006e768 ( 16 B )
DEBUG: allocated [an Integer] 0 from 0x60006e898 to 0x60006e8b0 ( 24 B )
DEBUG: allocated [a Boolean] #t from 0x60006e8b0 to 0x60006e8c0 ( 16 B )
DEBUG: allocated [an Integer] 1 from 0x60006e8c0 to 0x60006e8d8 ( 24 B )
DEBUG: allocated [an Integer] 3 from 0x60006e8d8 to 0x60006e8f0 ( 24 B )
3
> DEBUG: allocated nil from 0x60006e8f0 to 0x60006e900 ( 16 B )
empty input, ending
DEBUG: IT TOOK 8926 us
